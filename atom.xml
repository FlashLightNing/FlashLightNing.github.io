<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boom</title>
  <subtitle>黎明就在眼前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://FlashLightNing.github.io/"/>
  <updated>2017-02-26T13:19:38.225Z</updated>
  <id>http://FlashLightNing.github.io/</id>
  
  <author>
    <name>mingfeng lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次内存泄漏排查问题</title>
    <link href="http://FlashLightNing.github.io/2017/02/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://FlashLightNing.github.io/2017/02/26/记一次内存泄漏排查问题/</id>
    <published>2017-02-26T13:18:14.000Z</published>
    <updated>2017-02-26T13:19:38.225Z</updated>
    
    <content type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160;在使用&lt;a href=&quot;http://baike.baidu.com/link?url=Tm05p-GxF6PfTuiDzevm8zLTI7jjVdp-EDHMO23JkyWHpqMD7AncZT_TCNpquWHBKzK-t7ji3RbwGId25uydZa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaCV&lt;/a&gt;做图像处理时，发现程序运行起来之后，处理了百来次的时候，就报了outofmemory的错误。因为javacv底层就是调用opencv的native方法，判断是出现了内存泄漏问题，可能是调用了哪个方法之后没有正确释放资源。&lt;/p&gt;
&lt;h3 id=&quot;1-用jconsole观察&quot;&gt;&lt;a href=&quot;#1-用jconsole观察&quot; class=&quot;headerlink&quot; title=&quot;1.用jconsole观察&quot;&gt;&lt;/a&gt;1.用jconsole观察&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160;首先是需要在测试机器上修改启动命令，使得能够支持jconsole远程连接。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-Dcom.sun.management.jmxremote.port=8999 \  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Dcom.sun.management.jmxremote.authenticate=false \  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Dcom.sun.management.jmxremote.ssl=false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160;这样，启动本地java安装目录bin下的jconsole.exe启动界面，输入远程主机的IP和8999端口，就可以连接上了。&lt;br&gt;&lt;img src=&quot;http://7xsmif.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720170226203723.png&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;这个图是正常的垃圾回收。当时的图是只有上升，没有下降的一个过程，然后到顶点就产生了outofmemory错误。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-排查&quot;&gt;&lt;a href=&quot;#2-排查&quot; class=&quot;headerlink&quot; title=&quot;2.排查&quot;&gt;&lt;/a&gt;2.排查&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160;网上查询了一下内存泄漏的分析工具，给eclipse安装了MAT插件用于分析文件。为了生成hprof文件,在测试机器上多次调用方法，直到根据jconsole发现快到顶点了，运行以下命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jmap -dump:format=b,file=a.hprof  24957&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//后面的24957是进程ID可用下面命令get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ps -ef|grep java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后找到项目名对应的pid即可&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160;生成的文件直接用装了MAT插件的eclipse打开即可：&lt;br&gt;&lt;img src=&quot;leanote://file/getImage?fileId=58b2d2872b94f0554d000000&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160;可以看到图中很明显的第三方库的类名，就可以判断可能是在用该类的地方的资源没释放，然后对应地查找。当然MAT和jconsole还有更强大的功能等着大家去使用。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160;这里说一句题外话，在使用这几个类的地方，发现用完之后已经调用了释放方法，很是奇怪，也没头绪。后面想到跟javacv给的sample code对比一下，发现网上流传的释放方法和样例中的并不一致，改成样例中的方法之后，解决了该问题。&lt;strong&gt;得到的教训是如果第三方库有给示例代码，还是得多参考示例代码。&lt;/strong&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160;最终再用jconsole连接机器，观察内存回收，就得到了上面那个图。还有下面这个图：&lt;br&gt;&lt;img src=&quot;http://7xsmif.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720170226203741.png&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160;这里看到使用的回收算法是新生代是parNew,老年代是CMS。顺势复习了一波垃圾回收算法，做了下面这样一个图片：&lt;br&gt;&amp;#160; &amp;#160; &amp;#160;链接：&lt;a href=&quot;https://www.processon.com/view/587a409de4b098bf4ca43bf7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.processon.com/view/587a409de4b098bf4ca43bf7&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160;在使用&lt;a href=&quot;http://baike.baidu.com/link?url=Tm05p-
    
    </summary>
    
    
      <category term="java" scheme="http://FlashLightNing.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP协议卷解一各章节导图</title>
    <link href="http://FlashLightNing.github.io/2017/02/19/TCP-IP%E5%8D%8F%E8%AE%AE%E5%8D%B7%E8%A7%A3%E4%B8%80%E5%90%84%E7%AB%A0%E8%8A%82%E5%AF%BC%E5%9B%BE/"/>
    <id>http://FlashLightNing.github.io/2017/02/19/TCP-IP协议卷解一各章节导图/</id>
    <published>2017-02-19T14:43:52.000Z</published>
    <updated>2017-02-19T14:56:36.362Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;160-160-160&quot;&gt;&lt;a href=&quot;#160-160-160&quot; class=&quot;headerlink&quot; title=&quot;&amp;#160; &amp;#160; &amp;#160;&quot;&gt;&lt;/a&gt;&amp;#160; &amp;#160; &amp;#160;&lt;/h3&gt;&lt;p&gt;TCP/IP协议卷解一各章节做的思维导图，有疏漏或者是错误的地方请指出&lt;/p&gt;
&lt;h4 id=&quot;160-160-160-1&quot;&gt;&lt;a href=&quot;#160-160-160-1&quot; class=&quot;headerlink&quot; title=&quot;&amp;#160; &amp;#160; &amp;#160;&quot;&gt;&lt;/a&gt;&amp;#160; &amp;#160; &amp;#160;&lt;/h4&gt;&lt;p&gt;第14章：TCP超时与重传&lt;br&gt;&lt;a href=&quot;https://www.processon.com/view/link/58a9b015e4b0ebc4ceb3b67f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.processon.com/view/link/58a9b015e4b0ebc4ceb3b67f&lt;/a&gt;&lt;br&gt;第15章：TCP数据流与窗口管理&lt;br&gt;&lt;a href=&quot;https://www.processon.com/view/link/58a9ae7ae4b095ef689fb98c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.processon.com/view/link/58a9ae7ae4b095ef689fb98c&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;160-160-160&quot;&gt;&lt;a href=&quot;#160-160-160&quot; class=&quot;headerlink&quot; title=&quot;&amp;#160; &amp;#160; &amp;#160;&quot;&gt;&lt;/a&gt;&amp;#160; &amp;#160; &amp;#160;&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="reading" scheme="http://FlashLightNing.github.io/categories/reading/"/>
    
    
  </entry>
  
  <entry>
    <title>2017计划</title>
    <link href="http://FlashLightNing.github.io/2017/02/19/2017%E8%AE%A1%E5%88%92/"/>
    <id>http://FlashLightNing.github.io/2017/02/19/2017计划/</id>
    <published>2017-02-19T14:12:52.000Z</published>
    <updated>2017-02-19T14:39:48.566Z</updated>
    
    <content type="html">&lt;h3 id=&quot;160-160-160-160-新的一年计划看几本书，不多说，先看完这3本书再说吧。&quot;&gt;&lt;a href=&quot;#160-160-160-160-新的一年计划看几本书，不多说，先看完这3本书再说吧。&quot; class=&quot;headerlink&quot; title=&quot;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 新的一年计划看几本书，不多说，先看完这3本书再说吧。&quot;&gt;&lt;/a&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 新的一年计划看几本书，不多说，先看完这3本书再说吧。&lt;/h3&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;1.TCP/IP协议卷解一(第二版)&lt;br&gt;2.现代操作系统(第3版)&lt;br&gt;3.Effective Java(第二版)&lt;br&gt;….&lt;br&gt;边看边做笔记画导图然后发布在processon和博客上。发现图形化记忆确实容易理解和记忆，把整个来龙去脉都能有较清晰的认识。effective java 可以随时翻一下看一下。主要攻读tcp和操作系统。初步计划每本书花2个月。&lt;/p&gt;
&lt;h3 id=&quot;160-160-160-新的一年计划保持跑步，每星期跑3次，刚坚持半个月。。&quot;&gt;&lt;a href=&quot;#160-160-160-新的一年计划保持跑步，每星期跑3次，刚坚持半个月。。&quot; class=&quot;headerlink&quot; title=&quot;&amp;#160; &amp;#160; &amp;#160; 新的一年计划保持跑步，每星期跑3次，刚坚持半个月。。&quot;&gt;&lt;/a&gt;&amp;#160; &amp;#160; &amp;#160; 新的一年计划保持跑步，每星期跑3次，刚坚持半个月。。&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;160-160-160-160-新的一年计划看几本书，不多说，先看完这3本书再说吧。&quot;&gt;&lt;a href=&quot;#160-160-160-160-新的一年计划看几本书，不多说，先看完这3本书再说吧。&quot; class=&quot;headerlink&quot; title=&quot;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 新的一年计划看几本书，不多说，先看完这3本书再说吧。&quot;&gt;&lt;/a&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 新的一年计划看几本书，不多说，先看完这3本书再说吧。&lt;/h3&gt;
    
    </summary>
    
      <category term="reading" scheme="http://FlashLightNing.github.io/categories/reading/"/>
    
    
      <category term="reading" scheme="http://FlashLightNing.github.io/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>redis实现分布式锁</title>
    <link href="http://FlashLightNing.github.io/2016/12/04/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5/"/>
    <id>http://FlashLightNing.github.io/2016/12/04/redis实现分布式锁的一次实践/</id>
    <published>2016-12-04T03:10:40.000Z</published>
    <updated>2016-12-04T07:13:01.923Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;假设有这样一个场景：用户在APP上点击下单的时候，会跳到一个地址管理页面，其中保存着自己的地址。如果用户之前没有添加过地址，那么他添加的第一个地址就会被设置为默认地址。同时，每一个用户有且只有一个默认地址。那么，这个添加地址的接口实现应该大致是这样：先判断当前用户在数据库中的地址数量，如果是0，则将当前添加的地址设置为默认地址，否则，则设置为非默认地址。 &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;初始代码&quot;&gt;&lt;a href=&quot;#初始代码&quot; class=&quot;headerlink&quot; title=&quot;初始代码&quot;&gt;&lt;/a&gt;初始代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nowAddressCount =addressDao.getCount(uid); &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nowAddressCount ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;	&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addressInfo.setIsDefault(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   addressdao.insert(addressInfo)；	&lt;span class=&quot;comment&quot;&gt;//4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	addressInfo.setIsDefault(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addressdao.insert(addressInfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这样的一个代码，如果用户点击添加地址的时候，短时间内重复点击了多次，而前端又没有做防重复提交的话，前端短时间内一下子请求了多次该接口。那么其实这段代码是有线程安全问题的。线程安全问题其实就是多个线程对同一份数据进行读取/修改 的时候存在问题，例如一些全局变量。在这里，同一份数据指的就是数据库里面的同一份数据。 &lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;现在假设有线程A,线程B。线程A去读取数据库，发现该用户没有地址，然后接着进行到第2，3处代码，在还没执行第4处，也就是还没插入到数据库中的时候，线程B也执行了第1处代码，发现count=0,然后也进入了2，3处。这样最终就会导致这2个地址都成了默认地址。其实，这里的if(满足什么条件){进行什么什么样的处理} 就是线程安全问题中的竞态条件(先检查，后执行)。 &lt;/p&gt;
&lt;h3 id=&quot;单机环境下线程安全代码&quot;&gt;&lt;a href=&quot;#单机环境下线程安全代码&quot; class=&quot;headerlink&quot; title=&quot;单机环境下线程安全代码&quot;&gt;&lt;/a&gt;单机环境下线程安全代码&lt;/h3&gt;&lt;p&gt;所以代码就变成了这样：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nowAddressCount =addressDao.getCount(uid); &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nowAddressCount ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;	&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&amp;#123;	&lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(addressDao.getCount(uid)==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		addressInfo.setIsDefault(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		addressdao.insert(addressInfo)；	&lt;span class=&quot;comment&quot;&gt;//6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		addressInfo.setIsDefault(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			addressdao.insert(addressInfo);&lt;span class=&quot;comment&quot;&gt;//8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	addressInfo.setIsDefault(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addressdao.insert(addressInfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;em&gt;**&lt;/em&gt;通过加锁，保证了从3-8每次只有一个线程能访问。第二个线程进入3的时候，第一个线程肯定已经插入完毕了，所以它再次查询count的时候，就不是0，而是1了。这样第二个线程插入的地址也就不会被设置成默认地址。不过这个锁对象（this）的粒度比较大，可以考虑不同UID用不同的锁对象，能提高点性能，参考concurrentHashMap.&lt;/p&gt;
&lt;h3 id=&quot;分布式环境下&quot;&gt;&lt;a href=&quot;#分布式环境下&quot; class=&quot;headerlink&quot; title=&quot;分布式环境下&quot;&gt;&lt;/a&gt;分布式环境下&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;但是还有一个问题。这段代码在单机环境下是可以正确执行的。如果是部署在多台服务器上呢？假设存在一种情况：有一台服务器A，服务器B。如果同一个用户的多次提交分别被分发到了服务器A和服务器B。然后在服务器A上，线程执行到第6行代码，但是addressInfo还没插入成功的时候,在服务器B上有线程进执行到了第4行代码，得到count=0。然后也将该地址设置为默认地址。 这时候，最终就也还是有2个默认地址。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;有一种比较简单的解决办法就是对UID进行映射，保证相同的UID映射到同一台机器。也可以用分布式锁了。网上查了一下，一般有3种方法，一种是根据zookeeper的，一种用的是mencache，还有就是用redis实现的。本质上都差不多，就是引入一个第三方公共的状态位来表示锁。 &lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;redis实现分布式锁的原理主要参考下面2篇翻译文章：&lt;br&gt;&lt;a href=&quot;https://www.oschina.net/translate/redis-distlock&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Redis 实现分布式锁&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ifeve.com/redis-lock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Redis官方文档》用Redis构建分布式锁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总结一下大致有以下几点： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;jedis有一个setnx(String key,String value)的命令，语意上是给该key设置value，如果该key不存在，则设置成功返回1.若该key已经存在，则设置失败返回0. 且该操作是原子性的。因为redis是单线程工作的，所以不会存在这个线程set的时候被另外一个线程抢先set成功的情况。 如果一个线程能setnx成功，即表示该线程拿到了锁。 &lt;/li&gt;
&lt;li&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;释放锁是通过命令delete(String key)。 一旦释放，其他线程试图setnx的时候，就会有一个线程成功，然后拿到锁。&lt;/li&gt;
&lt;li&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;我们还需要对key设置过期时间，避免在setnx成功，而delete之前发生一些异常或者故障，导致没有释放锁。若没有设置过期时间，该key会一直占有，导致其他线程一直setnx失败，即拿不到该锁导致死锁。通过命令expire(String key,int seconds)来设置过期时间。  &lt;/li&gt;
&lt;li&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;删除(释放锁)的时候还有一个小处理：假设存在一种情况：A线程拿到锁之后，然后因为网络阻塞，过了过期时间然后锁自动释放了。接着被线程B拿到锁后进行操作。这时候，A线程又尝试删除这个其实已经被B拿到的锁。所以如果用单纯的delete命令可能会导致误删除被其他线程拿到的锁。所以这里做的处理 是setnx(String key,String value)的时候，这个value要是随机的，且不会有任何2个线程的该value值一致。然后在delete的时候，只有get(String key)得到的value和我预期的一样的时候才能删除。&lt;/li&gt;
&lt;li&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;还有一个问题就是如何保证线程A释放锁之后，能被其他线程抢占到了？简单暴力点就是while(true)然后一直setnx()，但是这样对redis压力很大。还有一种就是使用redis的订阅模式。&lt;/li&gt;
&lt;li&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;setnx方法和expire方法最好是在事务中操作，避免setnx成功而expire失败，导致一直无法过期。但是如果是事务的话，setnx方法又无法快速返回值，只有在事务执行成功之后才能获取到结果，也就会导致是否set成功都会让key的过期时间延长5s。所以考虑还是不用事务，因为setnx成功而expire失败的概率还是很低的。而设置过期时间的主要目的是第3条。两者同时发生的概率就更小了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;所以有了下面的代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//redis操作类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RedisUtils&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;span class=&quot;comment&quot;&gt;//初始化jedis配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Long &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; uid,String value)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String key =uid+&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Long rst =jedis.setnx(key,value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rst==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;jedis.expire(key,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&amp;#125;&lt;span class=&quot;comment&quot;&gt;//设置过期时间5秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					  e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				      log.error(&lt;span class=&quot;string&quot;&gt;&quot;设置过期时间发生异常&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rst;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;setnx发生异常,key=&quot;&lt;/span&gt;+key+&lt;span class=&quot;string&quot;&gt;&quot;,value=&quot;&lt;/span&gt;+value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; uid,String exp)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String key =uid+&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String value=jedis.get(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(value !=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; exp.equals(value))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		jedis.del(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getRandomString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String all=&lt;span class=&quot;string&quot;&gt;&quot;123456qwertyuioplkhgsvbQWERTYUIOPLKJHGFDSAZXCVBNM7890&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lenth =all.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	StringBuilder sb =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;i++)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//随机生成20位长的字符串，满足前面的第4点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; loc =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random.nextInt(lenth);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sb.append(all.charAt(loc));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;原代码：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nowAddressCount =addressDao.getCount(uid); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nowAddressCount ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String random=RedisUtils.getRandomString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; rst =RedisUtils.insert(uid,random);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(rst ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Thread.sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//休眠2ms后继续获取，因为日志打印的一次插入操作是2ms左右，没有用订阅模式，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rst =RedisUtils.insert(uid,random);&lt;span class=&quot;comment&quot;&gt;//试图获取锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rst ==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//获取成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rst ==-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;log.error(&lt;span class=&quot;string&quot;&gt;&quot;发生异常,uid=&quot;&lt;/span&gt;+uid)；&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//进入这里说明已经获取到锁了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(addressDao.getCount(uid) ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addressInfo.setIsDefault(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addressdao.insert(addressInfo)；	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RedisUtils.delete(uid,random);&lt;span class=&quot;comment&quot;&gt;//释放锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addressInfo.setIsDefault(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	addressdao.insert(addressInfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	addressInfo.setIsDefault(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	addressdao.insert(addressInfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试发现这段代码部署在2台机器上，然后同时各有100个线程请求服务器A和服务器B，最终只会有一个默认地址。多次测试结果保持一致。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;假设有这样一个场景：用户在APP上点击下单的时候，会跳到一个地址管理页面，其中保存着自己的地址。如果用户之前没有添加过地址，那么他添加的第一个地址就会被设置为默认地址。同时，每一个用户有且只有一个默认地址。那么，这个添加地址的接口实现应该大致是这样：先判断当前用户在数据库中的地址数量，如果是0，则将当前添加的地址设置为默认地址，否则，则设置为非默认地址。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://FlashLightNing.github.io/tags/Java/"/>
    
      <category term="分布式" scheme="http://FlashLightNing.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="redis" scheme="http://FlashLightNing.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>学习方式的思考</title>
    <link href="http://FlashLightNing.github.io/2016/05/06/%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://FlashLightNing.github.io/2016/05/06/学习方式的思考/</id>
    <published>2016-05-05T16:34:58.000Z</published>
    <updated>2016-05-05T16:56:41.489Z</updated>
    
    <content type="html">&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;看了一个星期左右的《Spring技术内幕》，书中都以讲源码为主，硬着头皮看倒是也能看下去，但是感觉这样看有点脱离我的现状。网上看到说对技术框架的学习，大体分为三个阶段，觉得蛮有道理：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基础开发，主要是了解API、基于API完成应用&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;熟悉内核及原理，主要是了解框架的设计原理，阅读源码，洞悉内在机理&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化框架，主要是针对框架的已有功能的不足进行完善、优化，或者使用框架提供的机制扩展框架功能，或者对框架进行定制，让它适合特定情境&lt;/strong&gt;  &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;我现在还是停留在第一个阶段，连第一个阶段尚且都不能完全应对，就直接去看源码，确实有点脱离我目前的现状。所以毅然决定还是先打好第一步的基础，然后在应用这些api的时候，可以去顺带了解一下它的原理，加深理解。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这时候就需要另一本电子书了：《轻量级Java EE企业应用实战》，所以转变学习思路，先把基础api了解应用一下，再去做进一步的深入了解。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;实在是硬着头皮看不下去了(┬＿┬)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;看了一个星期左右的《Spring技术内幕》，书中都以讲源码为主，硬着头皮看倒是也能看下去，但是感觉这样看有点脱离我的现状。网上看到说对技术框架的学习，大体分为三个阶段，觉得蛮有道理：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基础开发，主要是了解API、基于API完成应用&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;熟悉内核及原理，主要是了解框架的设计原理，阅读源码，洞悉内在机理&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化框架，主要是针对框架的已有功能的不足进行完善、优化，或者使用框架提供的机制扩展框架功能，或者对框架进行定制，让它适合特定情境&lt;/strong&gt;
    
    </summary>
    
      <category term="reading" scheme="http://FlashLightNing.github.io/categories/reading/"/>
    
    
      <category term="生活" scheme="http://FlashLightNing.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>读《Spring技术内幕》 总结3:IoC容器的初始化过程</title>
    <link href="http://FlashLightNing.github.io/2016/05/05/%E8%AF%BB%E3%80%8ASpring%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E3%80%8B-%E6%80%BB%E7%BB%933-IoC%E5%AE%B9%E5%99%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
    <id>http://FlashLightNing.github.io/2016/05/05/读《Spring技术内幕》-总结3-IoC容器的初始化过程/</id>
    <published>2016-05-05T05:11:36.000Z</published>
    <updated>2016-05-05T05:56:15.283Z</updated>
    
    <content type="html">&lt;h1 id=&quot;博客概要&quot;&gt;&lt;a href=&quot;#博客概要&quot; class=&quot;headerlink&quot; title=&quot;博客概要&quot;&gt;&lt;/a&gt;博客概要&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;本篇只是结合编程式使用DefaultListableBeanFactory的代码，&lt;strong&gt;简单得描述了一下IOC容器初始化的过程&lt;/strong&gt;，分为3个步骤：Resource定位，载入BeanDefinition,注册这些Bean 。以及Spring中初始化的过程和依赖注入的过程是分开的，只有在对bean设置过lazy-init的情况下可能会使依赖注入在容器初始化的时候就发生，文中也有详细说明原因。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;IoC容器的初始化过程大概描述：&quot;&gt;&lt;a href=&quot;#IoC容器的初始化过程大概描述：&quot; class=&quot;headerlink&quot; title=&quot;IoC容器的初始化过程大概描述：&quot;&gt;&lt;/a&gt;IoC容器的初始化过程大概描述：&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;简单来说，IoC容器的初始化是由前面介绍的&lt;strong&gt;refresh()&lt;/strong&gt;方法(在FileSystemXmlApplicationCOntext中的一个构造方法中有调用这个refresh()方法)来启动的，这个方法&lt;strong&gt;标志着IoC容器的正式启动&lt;/strong&gt;。具体来说，&lt;strong&gt;这个启动包括 BeanDefinition的Resource定位(资源定位),载入，注册3个基本过程。&lt;/strong&gt;在我们前面编程式的使用DefaultListableBeanFactory的时候，我们就可以清楚得看到Resource资源定位和载入过程的接口调用。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ClassPathResource res =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassPathResource(&lt;span class=&quot;string&quot;&gt;&quot;applications.xml&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DefaultListableBeanFactory factory =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultListableBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XmlBeanDefinitionReader reader =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlBeanDefinitionReader(factory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reader.loadBeanDefinitions(res);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;Spring把这3个过程分开，并且用不同的模块来完成，比如用相应的ResourceLoader，BeanDefinitionReader等模块，通过这样的设计方式，可以让用户更加灵活地根据自己的需要来对这些模块进行裁剪和添加&lt;/p&gt;
&lt;h2 id=&quot;Resource资源定位过程&quot;&gt;&lt;a href=&quot;#Resource资源定位过程&quot; class=&quot;headerlink&quot; title=&quot;Resource资源定位过程&quot;&gt;&lt;/a&gt;Resource资源定位过程&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这个Resource定位指的是BeanDefinition的资源定位，它由ResourceLoader通过统一的Resource接口来完成，并且这个Resource&lt;strong&gt;对各种形式的BeanDefinition都提供了统一的接口&lt;/strong&gt;。比如在文件系统中的BeanDefinition可以使用FileSystemResource来进行抽象，在类路径中的BeanDefinition可以使用前面提到的ClassPathResource来使用。&lt;br&gt;我的理解就是需要让程序定位到你的那个resource文件，比如我们常用的“application.xml”，里面定义了许多bean的信息，所以这个过程就是怎样让程序找到这个文件，然后还要将它封装成resource的类型(Resource是Spring用来封装I/O的类)。&lt;/p&gt;
&lt;h2 id=&quot;BeanDefinition的载入&quot;&gt;&lt;a href=&quot;#BeanDefinition的载入&quot; class=&quot;headerlink&quot; title=&quot;BeanDefinition的载入&quot;&gt;&lt;/a&gt;BeanDefinition的载入&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这个载入过程就是&lt;strong&gt;把我们定义好的Bean表示成IoC内部的数据结构&lt;/strong&gt;–其实就是BeanDefinition。 具体来说，这个BeanDefinition就是POJO对象在IoC容器中的抽象，通过这个BeanDefinition定义的数据结构，使得IoC容器能够方便地对POJO对象，也就是Bean，进行管理。&lt;/p&gt;
&lt;h2 id=&quot;向IoC容器注册这些BeanDefinition&quot;&gt;&lt;a href=&quot;#向IoC容器注册这些BeanDefinition&quot; class=&quot;headerlink&quot; title=&quot;向IoC容器注册这些BeanDefinition&quot;&gt;&lt;/a&gt;向IoC容器注册这些BeanDefinition&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;接下来就是通过调用BeanDefinitionRegistry接口来把这些BeanDefinition向IoC容器中注册。下面是BeanDefinitionRegistry接口的源码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanDefinitionRegistry&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AliasRegistry&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registerBeanDefinition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String beanName, BeanDefinition beanDefinition)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeanDefinitionStoreException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//移除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeBeanDefinition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String beanName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//得到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;BeanDefinition &lt;span class=&quot;title&quot;&gt;getBeanDefinition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String beanName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//判断是否包含&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsBeanDefinition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String beanName)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回所有在这个registry中定义的bean的名字，如果不存在就返回一个空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String[] getBeanDefinitionNames();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBeanDefinitionCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断指定的name是否已经在这个registry中使用，或者判断是否有一个bean的name或者是别名使用的是这个name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isBeanNameInUse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String beanName)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;观察左边的接口关系图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/beanDefinitionRegistry.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;可以看到经常提到的&lt;strong&gt;DefaultListableBeanFactory&lt;/strong&gt;正是实现了该接口！&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;看看DefaultListableBeanFactory的代码(只摘取了一部分代码)&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultListableBeanFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractAutowireCapableBeanFactory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;BeanDefinitionRegistry&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, Reference&amp;lt;DefaultListableBeanFactory&amp;gt;&amp;gt; serializableFactories =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;String, Reference&amp;lt;DefaultListableBeanFactory&amp;gt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, BeanDefinition&amp;gt; beanDefinitionMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;String, BeanDefinition&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt; allBeanNamesByType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt; singletonBeanNamesByType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; List&amp;lt;String&amp;gt; beanDefinitionNames = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Set&amp;lt;String&amp;gt; manualSingletonNames = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;String&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;可以看到，在DefaultListableBeanFactory内部是通过将这些BeanDefinition放入HashMap中进行管理的。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;需要注意的是，&lt;strong&gt;在这个IoC容器初始化的过程中，一般不包含Bean依赖注入的实现&lt;/strong&gt;. 在Spring IoC的设计中，Bean定义的载入和依赖注入是两个独立的过程。&lt;strong&gt;依赖注入一般发生在应用第一次通过getBean向IoC容器索取Bean的时候&lt;/strong&gt;。但是也有例外，那就是设置了lazy-init值(延迟加载)的时候.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先说说lazy-init是干嘛的？ 如果 lazy-init=”true” 表示我们需要这个Bean延迟加载，那么在IoC初始化的时候就不会实例化这个Bean，直到你索要的时候( getBean(String name) )才会实例化.如果没设置，默认是false -&amp;gt;不延迟加载，所以默认会初始化这些Bean，可能导致Spring启动速度很慢  &lt;/li&gt;
&lt;li&gt;那么，如果有2个Bean:bean1,bean2。&lt;strong&gt; bean1是延迟加载，bean2没有， bean2里面依赖bean1。 然后bean2在容器初始化的时候就实例化了，那么这会导致bean1也会实例化而不是延迟加载。&lt;/strong&gt;因为容器在实例化bean2的时候，如果bean1没有实例化，那bean2怎么依赖它，所以必须使得bean2也实例化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;因此，如果Ioc容器在启动的时候创建了那些设置为延迟实例化的bean的实例，你也不要觉得奇怪，因为那些延迟初始化的bean可能在配置的某个地方被注入到了一个非延迟初始化singleton bean里面。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;如果两个bean:bean1,bean2,bean2依赖bean1，只要bean2没设置lazy-init(缺省是false)或者设置为lazy-init=false，那么它的依赖注入会在第一次调用bean2的时候才发生。只有bean2设置了为true,依赖注入就会在IoC初始化的时候发生&lt;/strong&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;结论： 因此，在这个IoC容器初始化的过程中，一般是不包含Bean依赖注入的&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;博客概要&quot;&gt;&lt;a href=&quot;#博客概要&quot; class=&quot;headerlink&quot; title=&quot;博客概要&quot;&gt;&lt;/a&gt;博客概要&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;本篇只是结合编程式使用DefaultListableBeanFactory的代码，&lt;strong&gt;简单得描述了一下IOC容器初始化的过程&lt;/strong&gt;，分为3个步骤：Resource定位，载入BeanDefinition,注册这些Bean 。以及Spring中初始化的过程和依赖注入的过程是分开的，只有在对bean设置过lazy-init的情况下可能会使依赖注入在容器初始化的时候就发生，文中也有详细说明原因。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://FlashLightNing.github.io/categories/Spring/"/>
    
    
      <category term="reading" scheme="http://FlashLightNing.github.io/tags/reading/"/>
    
      <category term="Java" scheme="http://FlashLightNing.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://FlashLightNing.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>鸟枪换炮</title>
    <link href="http://FlashLightNing.github.io/2016/05/04/%E9%B8%9F%E6%9E%AA%E6%8D%A2%E7%82%AE/"/>
    <id>http://FlashLightNing.github.io/2016/05/04/鸟枪换炮/</id>
    <published>2016-05-04T15:19:44.000Z</published>
    <updated>2016-05-04T15:42:43.810Z</updated>
    
    <content type="html">&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;昨天买的SSD今天一大早到了~迫不及待换到笔记本光驱上。由于软件太多，就不打算重装系统了，当个存储盘用用，等过段时间换电脑了再换到新电脑上去。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;然后赶紧把eclipse放进去，真是受够了之前开个软件要半天的感觉，换了之后感觉快多了~~。然后是其他常用软件，chroome浏览器等等。不过放到ssd上之后确实开起来快多了~&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;鸟枪换炮，终于不是小霸王了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;昨天买的SSD今天一大早到了~迫不及待换到笔记本光驱上。由于软件太多，就不打算重装系统了，当个存储盘用用，等过段时间换电脑了再换到新电脑上去。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;然后赶紧把ecl
    
    </summary>
    
      <category term="生活" scheme="http://FlashLightNing.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://FlashLightNing.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>读《Spring-技术内幕》 总结2:IoC容器的实现-2</title>
    <link href="http://FlashLightNing.github.io/2016/05/03/%E8%AF%BB%E3%80%8ASpring-%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E3%80%8B%E6%80%BB%E7%BB%932-IoC%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0-2/"/>
    <id>http://FlashLightNing.github.io/2016/05/03/读《Spring-技术内幕》总结2-IoC容器的实现-2/</id>
    <published>2016-05-02T16:39:50.000Z</published>
    <updated>2016-05-05T05:45:41.594Z</updated>
    
    <content type="html">&lt;h1 id=&quot;IoC容器系列的设计与实现&quot;&gt;&lt;a href=&quot;#IoC容器系列的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;IoC容器系列的设计与实现&quot;&gt;&lt;/a&gt;IoC容器系列的设计与实现&lt;/h1&gt;&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;博客介绍了BeanFactory这个容器的基本接口，如getBean(String name)，containsBean(String name)等等，但是这些接口并没有具体的实现，因此给出了XmlBeanFactory容器的实现过程,还用编程的方式使用了DefaultListableBeanFactory这个容器,成功得获得了在BeanDefinition中定义的一个Bean.通过编程式的使用，让我们明白IoC容器中的关键的类之间的相互依赖关系，如Resource,BeanDefinitionReader等。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Spring中BeanDefinition都要封装成Resource的格式才能进行处理，因为beans.xml在类路径下，所以用ClassPathResource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ClassPathResource res =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassPathResource(&lt;span class=&quot;string&quot;&gt;&quot;beans.xml&quot;&lt;/span&gt;)；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DefalutListableBeanFactory factory =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultListableBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//对XML文件的处理其实是通过XmlBeanDefinitionReader来处理的(详见BeanFactory容器的设计原理)，然后可以理解需要将得到的Bean定义信息传入factory工厂中，让它生成对象，所以需要传入一个factory对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XmlBeanDefinitionReader reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlBeanDefinitionReader(factory)；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//让res进行载入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read.loadBeanDefinitions(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//其实这样就完成了容器初始化的过程，后面就可以通过getBean(String name )得到相应的Bean了。大家可以试试~~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;BeanFactory的应用场景&quot;&gt;&lt;a href=&quot;#BeanFactory的应用场景&quot; class=&quot;headerlink&quot; title=&quot;BeanFactory的应用场景&quot;&gt;&lt;/a&gt;BeanFactory的应用场景&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;正如上一篇所提到的，BeanFactory提供的是最基本的IoC容器的功能。BeanFactory接口定义了IoC容器最基本的形式。很显然，Spring并没有给出容器的具体实现。下面来看看Spring是怎样定义IoC容器的基本接口的。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;首先最基本的是设计了getBean方法，这个方法是使用IoC容器API的主要方法。通过这个方法，可以取得这个容器管理的Bean(通过指定名字来索引)，取得了Bean之后，就可以应用在程序之中。&lt;br&gt;BeanFactory接口：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String FACTORY_BEAN_PREFIX = &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//很方便的通过各种不同方法获取容器中的Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, Class&amp;lt;T&amp;gt; requiredType)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;T&amp;gt; requiredType)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, Object... args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;T&amp;gt; requiredType, Object... args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断容器中是否包含该名字的Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*判断Bean的作用域：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prototype ：该作用域将单一 bean 的定义限制在任意数量的对象实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;singleton : 该作用域将 bean 的定义的限制在每一个 Spring IoC 容器中的一个单一实例(默认)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPrototype&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断该名字对应的Bean的Class类型是否是特定的Class类型。这个Class类型可以由用户来指定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isTypeMatch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, ResolvableType typeToMatch)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isTypeMatch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, Class&amp;lt;?&amp;gt; typeToMatch)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//得到该Bean的Class类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class&amp;lt;?&amp;gt; getType(String name) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//查询该Bean的所有别名。这些别名都是在BeanDefinition中定义的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String[] getAliases(String name);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;以XmlBeanFactory的实现来说明BeanFactory容器的设计原理&quot;&gt;&lt;a href=&quot;#以XmlBeanFactory的实现来说明BeanFactory容器的设计原理&quot; class=&quot;headerlink&quot; title=&quot;以XmlBeanFactory的实现来说明BeanFactory容器的设计原理&quot;&gt;&lt;/a&gt;以XmlBeanFactory的实现来说明BeanFactory容器的设计原理&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;BeanDefinition提供了使用IoC容器的规范，在这个基础上，Spring还提供了符合这个IoC容器接口的一系列的容器的实现让我们使用。以&lt;strong&gt;XmlBeanFactory&lt;/strong&gt;的实现为例：&lt;br&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/ioc3.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;可以看到，XmlBeanFactory不像之前的ApplicationContext，后者继承了各式各样的接口，有着丰富的功能(上一篇有说明)，XmlBeanFactory只提供了最基本的IoC容器的功能。我们可以认为：&lt;strong&gt;直接的BeanFactory实现是IoC容器的基本形式，比如这个XmlBeanFactory.而各种ApplicationContext的实现则是IoC容器的高级表现形式。&lt;/strong&gt; 下面，我们就从XmlBeanFactory的实现入手分析，看看一个基本的IoC容器是怎样实现的。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;XmlBeanFactory继承自DefaultListableBeanFactory这个类，后者非常重要，是我们经常要用到的一个IoC容器的实现，在设计ApplicationContext的时候也有用到它。DefaultListableBeanFactory实际上已经包含了基本IoC容器所具有的重要功能。&lt;strong&gt;在Spring中实际上是把DefaultListableBeanFactory作为一个默认的功能完整的IoC容器来使用的&lt;/strong&gt;。而XmlBeanFactory继承了它之后，又增加了新的功能：&lt;strong&gt;它是一个可以读取以XML文件定义BeanDefinition的IoC容器&lt;/strong&gt;。XmlBeanFactory又是怎样实现读取XML文件的呢？  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;其实，对这些XML文件的处理并不是由XmlBeanFactory直接完成的，而是它里面初始化的一个&lt;strong&gt;XmlBeanDefinitionReader对象&lt;/strong&gt;。所以实际上是由XmlBeanDefinitionReader来完成XML文件处理的。  &lt;/li&gt;
&lt;li&gt;在构建XmlBeanFactory这个IoC容器时，需要指定BeanDefinition的信息来源，而且这个来源需要封装成Spring中的Resource类来给出。(Resource是Spring用来封装I/O操作的类)。比如BeanDefinition是以XML文件的形式，那么可以使用像：&lt;strong&gt;ClassPath-Resource res =new ClassPathResource(“beans.xml”)&lt;/strong&gt; 这样具体的ClassPathResource来构造Resource。  &lt;/li&gt;
&lt;li&gt;将前面构造的Resource作为构造参数传递给XmlBeanFactory构造函数。这样IoC容器就可以定位到这个BeanDefinition，从而对Bean完成容器的初始化和依赖注入过程。  &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XmlBeanFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultListableBeanFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//初始化XmlBeanDefinitionReader对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; XmlBeanDefinitionReader reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlBeanDefinitionReader(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XmlBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Resource resource)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(resource, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XmlBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Resource resource, BeanFactory parentBeanFactory)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(parentBeanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从BeanDefinition资源文件中载入信息，loadBeanDefinitions也是IoC容器初始化的重要组成部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.reader.loadBeanDefinitions(resource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;编程式的使用DefaultListableBeanFactory&quot;&gt;&lt;a href=&quot;#编程式的使用DefaultListableBeanFactory&quot; class=&quot;headerlink&quot; title=&quot;编程式的使用DefaultListableBeanFactory&quot;&gt;&lt;/a&gt;编程式的使用DefaultListableBeanFactory&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;可以看到，XmlBeanFactory继承了DefaultListableBeanFactory，后者的重要性不多说~（已经写了好几遍了）参考XmlBeanFactory的实现过程，我们用编程的方式使用DefaultListableBeanFactory，因为这个编程式使用DefaultListableBeanFactory的过程，可以让我们明白IoC容器中的关键的类之间的相互依赖关系，如Resource,BeanDefinitionReader等等。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ClassPathResource res =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassPathResource(&lt;span class=&quot;string&quot;&gt;&quot;beans.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DefaultListableBeanFactory factory =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultListableBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XmlBeanDefinitionReader reader =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlBeanDefinitionReader(factory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reader.loadBeanDefinition(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//假如BeanDefinition中有一个name为helloWorld的Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HelloWorld hw5 = (HelloWorld) factory.getBean(&lt;span class=&quot;string&quot;&gt;&quot;helloWorld&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;5=&quot;&lt;/span&gt; + hw5.getMessage());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;beans.xml中的BeanDefinition定义：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;bean id=&quot;helloWorld&quot; class=&quot;com.lumingfeng.springStudy.helloSpring.HelloWorld&quot; scope=&quot;singleton&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;property name=&quot;message&quot; value=&quot;hello,spring&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;HelloWorld Bean类：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.lumingfeng.springStudy.helloSpring;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String message)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.message = message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;被初始化&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.address=&lt;span class=&quot;string&quot;&gt;&quot;123&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;被销毁&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.address=&lt;span class=&quot;string&quot;&gt;&quot;456&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出的结果：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;=hello,spring&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这样，我们就可以通过factory对象来使用DefaultListableBeanFactory这个IoC容器了。这个过程和我们上面提到的XmlBeanFactory读取XML文件的步骤是基本一致的：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建IoC配置文件的抽象资源，这个抽象资源包含了BeanDefinition的定义信息(ClassPathResource res =new ClassPathResource(“beans.xml”);)&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建一个BeanFactory,这里使用了DefaultListableBeanFactory(DefaultListableBeanFactory factory =new DefaultListableBeanFactory();)&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建一个载入BeanDefiniton的读取器–BeanDefinitionReader对象，这里使用XmlBeandefinitionReader来载入XML文件形式的(XmlBeanDefinitionReader reader =new XmlBeanDefinitionReader(factory);)BeanDefinition,然后通过一个回调配置给BeanFactory。&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从定义的资源文件位置读取配置信息，具体这个解析过程由这里使用XmlBeandefinitionReader来完成(reader.loadBeanDefinition(res);)&lt;/strong&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 完成整个载入和注册Bean定义之后，需要的IoC容器就建立起来了。这个时候就可以直接使用IoC容器了&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;ApplicationContext相比BeanFactory的优点&quot;&gt;&lt;a href=&quot;#ApplicationContext相比BeanFactory的优点&quot; class=&quot;headerlink&quot; title=&quot;ApplicationContext相比BeanFactory的优点&quot;&gt;&lt;/a&gt;ApplicationContext相比BeanFactory的优点&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;上一节中我们了解了IoC容器建立的基本步骤，可以很方便的通过编程的方式来手动控制这些配置和容器的建立过程。但是在Spring中系统为我们提供了许多已经定义好的容器实现，如ApplicationContext.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/app1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;如图，可以看到ApplicationContext在BeanFactory的基础上添加了附加功能  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持不同的信息源.通过扩展了&lt;strong&gt;MessageSource&lt;/strong&gt;接口，这些信息源的扩展功能可以支持国际化的实现，为开发多语言版本提供支持  &lt;/li&gt;
&lt;li&gt;访问资源.这一特性体现在对&lt;strong&gt;ResourceLoader和Resource&lt;/strong&gt;的支持上，这样我们可以方便的从不同地方得到Bean定义资源，尤其是从不同的I/O途径。  &lt;/li&gt;
&lt;li&gt;支持应用事件，继承了接口&lt;strong&gt;ApplicationEventPublisher&lt;/strong&gt;，从而在上下文中引入了事件机制。这些事件和Bean的生命周期的结合为Bean的管理提供了便利。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;以FileSystemXmlApplicationContext的实现来说明ApplicationContext的设计原理&quot;&gt;&lt;a href=&quot;#以FileSystemXmlApplicationContext的实现来说明ApplicationContext的设计原理&quot; class=&quot;headerlink&quot; title=&quot;以FileSystemXmlApplicationContext的实现来说明ApplicationContext的设计原理&quot;&gt;&lt;/a&gt;以FileSystemXmlApplicationContext的实现来说明ApplicationContext的设计原理&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;我们以常用的&lt;strong&gt;FileSytemXmlApplicationContext&lt;/strong&gt;的实现为例来说明ApplicationContext容器的设计原理.&lt;br&gt;在FileSystemXmlApplicationContext的设计中可以看到，可以看到ApplicationContext的主要功能已经在它的基类AbstractXmlApplicationContext中实现了。在FileSystemXmlApplicationContext中，只需要实现和它自身设计相关的两个功能：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果直接使用FileSystemXmlApplicationContext，对于实例化这个ApplicationContext的支持，同时启动IoC容器的refresh()过程。&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileSystemXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] configLocations, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; refresh, ApplicationContext parent)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		setConfigLocations(configLocations);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (refresh) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			refresh();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;refresh()过程会涉及到IoC容器启动的一系列复杂操作，对于不同的容器实现，这些操作都是类似的，所以在基类中将它们封装好。所以我们在FileSystemXml的设计中看到的只是一个简单的调用。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;另一个功能是FileSystemXmlApplicationContext设计具体相关的功能，这部分与怎样从文件系统中加载XML的Bean定义资源有关。&lt;br&gt;通过这个过程，可以为在文件系统中读取以XML形式存在的BeanDefinition做准备，因为不同的ApplicationContext对应着不同的读取BeanDefinition的方式，在FileSystemXmlApplicationContext中实现的代码如下：&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Resource &lt;span class=&quot;title&quot;&gt;getResourceByPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String path)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (path != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; path.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			path = path.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileSystemResource(path);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;调用这个方法，就可以得到FileSystemResource的资源定位&lt;/p&gt;
&lt;h1 id=&quot;IoC容器初始化的过程&quot;&gt;&lt;a href=&quot;#IoC容器初始化的过程&quot; class=&quot;headerlink&quot; title=&quot;IoC容器初始化的过程&quot;&gt;&lt;/a&gt;IoC容器初始化的过程&lt;/h1&gt;&lt;p&gt;看完再做总结~~每篇文章短点为好，太长的让人看了失去耐性，能用短的篇幅把一个知识点说明白也是可以的~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IoC容器系列的设计与实现&quot;&gt;&lt;a href=&quot;#IoC容器系列的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;IoC容器系列的设计与实现&quot;&gt;&lt;/a&gt;IoC容器系列的设计与实现&lt;/h1&gt;&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;博客介绍了BeanFactory这个容器的基本接口，如getBean(String name)，containsBean(String name)等等，但是这些接口并没有具体的实现，因此给出了XmlBeanFactory容器的实现过程,还用编程的方式使用了DefaultListableBeanFactory这个容器,成功得获得了在BeanDefinition中定义的一个Bean.通过编程式的使用，让我们明白IoC容器中的关键的类之间的相互依赖关系，如Resource,BeanDefinitionReader等。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Spring中BeanDefinition都要封装成Resource的格式才能进行处理，因为beans.xml在类路径下，所以用ClassPathResource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ClassPathResource res =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassPathResource(&lt;span class=&quot;string&quot;&gt;&quot;beans.xml&quot;&lt;/span&gt;)；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DefalutListableBeanFactory factory =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultListableBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//对XML文件的处理其实是通过XmlBeanDefinitionReader来处理的(详见BeanFactory容器的设计原理)，然后可以理解需要将得到的Bean定义信息传入factory工厂中，让它生成对象，所以需要传入一个factory对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XmlBeanDefinitionReader reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlBeanDefinitionReader(factory)；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//让res进行载入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read.loadBeanDefinitions(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//其实这样就完成了容器初始化的过程，后面就可以通过getBean(String name )得到相应的Bean了。大家可以试试~~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://FlashLightNing.github.io/categories/Spring/"/>
    
    
      <category term="reading" scheme="http://FlashLightNing.github.io/tags/reading/"/>
    
      <category term="Java" scheme="http://FlashLightNing.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://FlashLightNing.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>读《Spring 技术内幕》 总结1:IoC容器的实现 (1)</title>
    <link href="http://FlashLightNing.github.io/2016/05/01/%E8%AF%BB%E3%80%8ASpring-%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E3%80%8B-%E6%80%BB%E7%BB%931-IoC%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0-1/"/>
    <id>http://FlashLightNing.github.io/2016/05/01/读《Spring-技术内幕》-总结1-IoC容器的实现-1/</id>
    <published>2016-04-30T17:35:58.000Z</published>
    <updated>2016-05-05T05:45:09.394Z</updated>
    
    <content type="html">&lt;h1 id=&quot;第二章：-Spring-Framework的核心：-IoC容器的实现（第一篇总结）&quot;&gt;&lt;a href=&quot;#第二章：-Spring-Framework的核心：-IoC容器的实现（第一篇总结）&quot; class=&quot;headerlink&quot; title=&quot;第二章： Spring Framework的核心： IoC容器的实现（第一篇总结）&quot;&gt;&lt;/a&gt;第二章： Spring Framework的核心： IoC容器的实现（第一篇总结）&lt;/h1&gt;&lt;h2 id=&quot;博客概要&quot;&gt;&lt;a href=&quot;#博客概要&quot; class=&quot;headerlink&quot; title=&quot;博客概要&quot;&gt;&lt;/a&gt;博客概要&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;博客总共总结了2个方面：1是介绍了IoC的概念，2是根据Spring的IoC接口关系图，通过2条设计主线来分析Spring是如何设计和实现IoC容器的？同时也简要的分析了这张IoC接口关系图（详见图2-2）&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;博客首先介绍了什么是IOC容器？IOC容器可以替我们做什么？为什么需要IOC容器？它又有什么优点？然后总结了Spring是如何设计和实现IOC容器的：Spring设计了一张&lt;strong&gt;广泛的的接口关系图&lt;/strong&gt;，在保证了IOC容器最基本功能规范的前提下，还提供了一系列的接口，这些接口可能在不同的环境下会被用到（比如读取不同配置信息，从不同的I/O读取配置信息，从类路径读取，从文件系统中读取等等），那么在用到的时候，只需要继承这些接口并实现，就可以实现IOC容器功能的扩展。Spring主要提供了2个主要的容器系列：&lt;strong&gt;BeanFactory&lt;/strong&gt; 和 &lt;strong&gt;ApplicationContext&lt;/strong&gt;，前者提供了IOC容器的基本规范的接口，比如有getBean()等方法，后者是高级实现，有着更丰富的功能。同时简要地分析了IOC容器的接口关系图以及它的设计思路&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Spring-IoC容器概述（介绍）&quot;&gt;&lt;a href=&quot;#Spring-IoC容器概述（介绍）&quot; class=&quot;headerlink&quot; title=&quot;Spring IoC容器概述（介绍）:&quot;&gt;&lt;/a&gt;Spring IoC容器概述（介绍）:&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;IoC（Inversion of Control),翻译过来就是&lt;strong&gt;控制反转&lt;/strong&gt;。我们都知道，在采用面向对象方法设计的软件系统中，它的底层实现都是由N个对象组成的，所有的对象通过彼此的合作，最终实现系统的业务逻辑。如果采用普通的方法，即在每个对象中需要的时候，通过new实例化一个需要的对象，然后调用这个对象的某个方法，这样会使得我们的整个系统的这些对象之间高度耦合。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;现在，伴随着工业级应用的规模越来越庞大，对象之间的依赖关系也越来越复杂，经常会出现对象之间的多重依赖性关系，因此，架构师和设计师对于系统的分析和设计，将面临更大的挑战。对象之间耦合度过高的系统，必然会出现牵一发而动全身的情形。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/ioc1.png&quot;&gt;&lt;br&gt;如图：对象之间复杂的依赖关系&lt;/p&gt;
&lt;h3 id=&quot;那么什么是IoC容器呢？它又可以替我们做什么？&quot;&gt;&lt;a href=&quot;#那么什么是IoC容器呢？它又可以替我们做什么？&quot; class=&quot;headerlink&quot; title=&quot;那么什么是IoC容器呢？它又可以替我们做什么？&quot;&gt;&lt;/a&gt;那么什么是IoC容器呢？它又可以替我们做什么？&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;那么什么是IoC容器呢？它又可以替我们做什么？&lt;/strong&gt;我的理解是可以把它比喻成一个第三方平台，里面存放着各种各样的实例化的对象，当我们需要的时候，直接从这个平台上拿这个对象到我们用到的地方，而不用自己去创建这个对象，给对象赋值等等一系列操作。我们只需要负责用，而不用去管这个对象是如何创建出来的。而且这样可以使得散落在系统中的各种实例化对象的操作统一集中到这个平台上，更加符合面向对象的特性。我们管这个平台叫IoC容器。为什么是容器呢？因为它里面存放着许许多多的实例化对象，就和一个杯子装了许多水一样，这个杯子就是容器，水就是对象。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;其中，最常见的方式叫做&lt;strong&gt;依赖注入&lt;/strong&gt; ：通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在Spring中，Spring IoC提供了一个基本的JavaBean容器，通过IoC模式管理依赖关系，并且通过依赖注入和AOP切面增强了为JavaBean这样的POJO对象赋予事务管理，生命周期管理等基本功能。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在应用开发中，往往需要引用和调用其他组件的服务，这种依赖关系如果固化在组件设计中，就会造成依赖关系的僵化和维护难度的增加。如果使用IoC容器，将资源获取的方向反转，让IoC容器主动管理这些依赖关系，且将这些依赖关系注入到组件中，那么这样会使得这些依赖关系的适配和管理更加的灵活。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;具体说到Spring IoC容器的时候，Spring IoC通过对Spring设计的IoC容器系列的实现来为多种多样的场景进行适配。换句话说，&lt;strong&gt;Spring设计了丰富的，各种各样的接口关系（如下图2-2）&lt;/strong&gt; ，并且每个接口都可以有它被用到的地方，比如读取不同配置信息，从不同的I/O读取配置信息，从类路径读取，从文件系统中读取等等，然后在各式各样的场景下，对这些接口进行了实现。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;我认为，这种设计思想也是一种很不错的设计模式，在保证了最基本功能的基础上，通过设计各种各样的接口，来完成各式各样的扩展功能。而且如果需要新添加一个扩展功能，只需要再设计一个接口，然后让系统继承该接口，并实现这个接口里面的方法，就可以在不改动原先的代码就完成功能的扩展。很方便很灵活！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;IOC容器系列的设计与实现：BeanFactory和ApplicationContext&quot;&gt;&lt;a href=&quot;#IOC容器系列的设计与实现：BeanFactory和ApplicationContext&quot; class=&quot;headerlink&quot; title=&quot;IOC容器系列的设计与实现：BeanFactory和ApplicationContext&quot;&gt;&lt;/a&gt;IOC容器系列的设计与实现：BeanFactory和ApplicationContext&lt;/h2&gt;&lt;h3 id=&quot;Spring-IoC容器的设计&quot;&gt;&lt;a href=&quot;#Spring-IoC容器的设计&quot; class=&quot;headerlink&quot; title=&quot;Spring IoC容器的设计&quot;&gt;&lt;/a&gt;Spring IoC容器的设计&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在Spring IoC容器的设计中，我们可以看到两个主要的容器系列：&lt;strong&gt;BeanFactory&lt;/strong&gt; 和&lt;strong&gt;ApplicationContext&lt;/strong&gt;。前者只是实现了容器的基本功能，后者是ApplicationContext应用上下文，它作为容器的高级形态而存在。它在简单容器的基础上，增加了许多面向框架的特性，同时对应用环境作了许多适配。这两种容器可以基本满足用户对IoC容器的大多数需求了。&lt;br&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/ioc2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;#160; &amp;#160; &amp;#160; &amp;#160;2-2是IoC容器的接口设计图，基本上包含了所有的接口类。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;就像商品都需要有产品说明书一样，作为一个IoC容器也需要为它的具体实现指定基本的功能规范。&lt;strong&gt;这个功能规范的设计就表现为BeanFactory接口类，它体现了Spring为提供给用户的IoC容器所设定的最基本的功能规范&lt;/strong&gt;。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;也正如图2-2表现的，&lt;strong&gt;可以看到BeanFactory是最老的，其他所有接口都直接或者间接继承自它&lt;/strong&gt;。所以只要是继承或者间接继承该接口的，那么这个类肯定就是符合最基本的功能规范的。同时，为了满足一定的应用场景，又有各种接口。每个接口都是为了适配某一个场景而产生的。如果需要实现这个应用场景，只需要继承该接口并实现相对应的方法即可。这样就可以在基本IoC容器的基础上进行扩展。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;以ApplicationContext为例：&lt;br&gt;它继承了&lt;strong&gt;ListableBeanFactory&lt;/strong&gt; 接口，&lt;strong&gt;AutowireCapableBeanFactory&lt;/strong&gt; 接口，&lt;strong&gt;MessageSource&lt;/strong&gt; 接口，&lt;strong&gt;ResourceLoader&lt;/strong&gt; 接口,&lt;strong&gt;ApplicationEventPublisher&lt;/strong&gt; 接口.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;扩展了&lt;strong&gt;MessageSource&lt;/strong&gt;接口，就可以支持不同的信息源，这些信息源的扩展功能可以支持国际化的实现，为开发多语言版本的应用提供帮助&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;扩展了&lt;strong&gt;ApplicationEventPublisher&lt;/strong&gt; ,就引入了事件机制，这些事件与Bean的生命周期相结合，为Bean的管理提供了便利&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;扩展了&lt;strong&gt;ResourceLoader&lt;/strong&gt;接口，我们就可以在不同的地方获得Bean定义资源。这一特性体现在对ResourceLoader和Resource的支持上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;可以看到ApplicationContext提供了许多附加的服务，功能更加丰富，对它的使用也是面向框架的风格。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;光有容器还不够，这装的水从哪来呢？怎么让容器知道我们需要哪些对象以及这些对象又依赖什么对象呢？这时候就需要我们的BeanDefinition了。在程序中就表现为我们的“application.xml”。当然这只是其中一种表现形式，还有其他方法可以作为BeanDefinition.&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;Spring通过定义BeanDefinition来管理各种对象以及它们之间的各种相互依赖关系。BeanDefinition抽象了我们对Bean的定义，是让容器起作用的主要数据类型。依赖反转功能都是围绕对这个BeanDefinition的处理来完成的。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/ioc2.png&quot;&gt;&lt;br&gt;下面对这张接口关系图做一个简单的分析，可以根据以下内容来理解这张接口关系图：&lt;/p&gt;
&lt;h4 id=&quot;第一条设计主线：&quot;&gt;&lt;a href=&quot;#第一条设计主线：&quot; class=&quot;headerlink&quot; title=&quot;第一条设计主线：&quot;&gt;&lt;/a&gt;第一条设计主线：&lt;/h4&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;从接口&lt;strong&gt;BeanFactory&lt;/strong&gt;到&lt;strong&gt;HierarchicalBeanFactory&lt;/strong&gt;，再到&lt;strong&gt;ConfigurableBeanFactory&lt;/strong&gt;是一条主要是BeanFactory设计路线。在这条路线中，首先是BeanFactory定义了基本的IoC容器规范，然后HierarchicalBeanFactory继承了BeanFactory的基本接口之后，增加了getParentBeanFactory()这样的接口功能，使得BeanFactory具备了双亲IoC容器的管理功能。在接下来的ConfigurableBeanFactory接口中，主要定义了一些对BeanFactory的配置功能，如通过setParentBeanFactory()设置双亲IoC容器，通过addBeanPostProcessor()配置Bean后置处理器等等。通过这些接口设计的叠加，定义了BeanFactory就是简单IoC容器的基本功能:&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;BeanFactory-&amp;gt;HierarchicalBeanFactory-&amp;gt;ConfigurableBeanFactory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BeanFactory:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否包含某个name的Bean：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取bean：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;T&amp;gt; requiredType)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;﻿​&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, Class&amp;lt;T&amp;gt; requiredType)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, Object... args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*判断bean的作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prototype：该作用域将单一 bean 的定义限制在任意数量的对象实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;singleton  :  该作用域将 bean 的定义的限制在每一个 Spring IoC 容器中的一个单一实例(默认)。*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPrototype&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NoSuchBeanDefinitionException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;HierarchicalBeanFactory：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HierarchicalBeanFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanFactory&lt;/span&gt;｛...｝&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个接口主要包含了getParentBeanFactory()这样的方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Return the parent bean factory, or &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; null&amp;#125; if there is none.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BeanFactory &lt;span class=&quot;title&quot;&gt;getParentBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使得FactoryBean有了管理双亲IOC容器的功能.&lt;/p&gt;
&lt;p&gt;ConfigurableBeanFactory:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConfigurableBeanFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HierarchicalBeanFactory&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;SingletonBeanRegistry&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;｝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个接口主要定义了对BeanFactory的配置功能,比如&lt;br&gt;设置双亲IOC容器；&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setParentBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BeanFactory parentBeanFactory)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IllegalStateException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置Bean后置处理器：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BeanPostProcessor beanPostProcessor)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;第二条设计主线&quot;&gt;&lt;a href=&quot;#第二条设计主线&quot; class=&quot;headerlink&quot; title=&quot;第二条设计主线&quot;&gt;&lt;/a&gt;第二条设计主线&lt;/h4&gt;&lt;p&gt;以ApplicationContext为核心的接口设计：&lt;br&gt;&lt;strong&gt;BeanFactory-&amp;gt;ListableBeanFactory-&amp;gt;ApplicationContext-&amp;gt;WebApplicationContext/ConfigurableApplicationContext.&lt;/strong&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在ListableBeanFactory接口中，细化了许多BeanFactory的接口功能，比如定义了getBeanDefinitionNames()接口方法。对于ApplicationContext接口，它通过继承MessageSource,ResourceLoader,ApplicationEventPublisher接口，在BeanFactory简单IoC容器的基础上添加了许多对高级容器的特性的支持。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EnvironmentCapable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ListableBeanFactory&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;HierarchicalBeanFactory&lt;/span&gt;,
    &lt;span class=&quot;title&quot;&gt;MessageSource&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ApplicationEventPublisher&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ResourcePatternResolver&lt;/span&gt;&lt;/span&gt;{
.....
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这张图涉及的是主要接口关系，而具体的IOC容器则是在这个接口体系下实现的。比如DefaultListableBeanFactory，这个基本IOC容器的实现就是实现了ConfigurableBeanFactory,从而成为一个简单的IoC容器的实现。&lt;strong&gt;像其他的IOC容器，比如XMLBeanFactory，都是在DefaultListableBeanFactory的基础上进行了扩展。同样的，ApplicationContext的实现也是如此。  &lt;/strong&gt;&lt;br&gt;这个接口系统以&lt;strong&gt;BeanFactory&lt;/strong&gt;和&lt;strong&gt;ApplicationContext&lt;/strong&gt;为核心。BeanFactory是最基本的接口。而ApplicationContext则通过&lt;strong&gt;继承了多个接口&lt;/strong&gt;，使得它有着更高级的IOC容器的特性。对于ApplicationContext而言，为了在Web环境中使用它，还设计了WebApplicationContext接口，而这个接口通过继承ThemeSource接口来扩充功能。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;感觉书中内容很多，需要理解的东西很多，就把BeanFactory和ApplicationContext的设计原理，以及IoC容器的初始化过程放在下一篇博客中做总结~~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：-Spring-Framework的核心：-IoC容器的实现（第一篇总结）&quot;&gt;&lt;a href=&quot;#第二章：-Spring-Framework的核心：-IoC容器的实现（第一篇总结）&quot; class=&quot;headerlink&quot; title=&quot;第二章： Spring Framework的核心： IoC容器的实现（第一篇总结）&quot;&gt;&lt;/a&gt;第二章： Spring Framework的核心： IoC容器的实现（第一篇总结）&lt;/h1&gt;&lt;h2 id=&quot;博客概要&quot;&gt;&lt;a href=&quot;#博客概要&quot; class=&quot;headerlink&quot; title=&quot;博客概要&quot;&gt;&lt;/a&gt;博客概要&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;博客总共总结了2个方面：1是介绍了IoC的概念，2是根据Spring的IoC接口关系图，通过2条设计主线来分析Spring是如何设计和实现IoC容器的？同时也简要的分析了这张IoC接口关系图（详见图2-2）&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;博客首先介绍了什么是IOC容器？IOC容器可以替我们做什么？为什么需要IOC容器？它又有什么优点？然后总结了Spring是如何设计和实现IOC容器的：Spring设计了一张&lt;strong&gt;广泛的的接口关系图&lt;/strong&gt;，在保证了IOC容器最基本功能规范的前提下，还提供了一系列的接口，这些接口可能在不同的环境下会被用到（比如读取不同配置信息，从不同的I/O读取配置信息，从类路径读取，从文件系统中读取等等），那么在用到的时候，只需要继承这些接口并实现，就可以实现IOC容器功能的扩展。Spring主要提供了2个主要的容器系列：&lt;strong&gt;BeanFactory&lt;/strong&gt; 和 &lt;strong&gt;ApplicationContext&lt;/strong&gt;，前者提供了IOC容器的基本规范的接口，比如有getBean()等方法，后者是高级实现，有着更丰富的功能。同时简要地分析了IOC容器的接口关系图以及它的设计思路&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://FlashLightNing.github.io/categories/Spring/"/>
    
    
      <category term="reading" scheme="http://FlashLightNing.github.io/tags/reading/"/>
    
      <category term="Java" scheme="http://FlashLightNing.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://FlashLightNing.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>读书计划-Spring技术内幕</title>
    <link href="http://FlashLightNing.github.io/2016/04/30/%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92-Spring%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/"/>
    <id>http://FlashLightNing.github.io/2016/04/30/读书计划-Spring技术内幕/</id>
    <published>2016-04-30T10:07:36.000Z</published>
    <updated>2016-04-30T11:27:23.546Z</updated>
    
    <content type="html">&lt;h1 id=&quot;《Spring技术内幕-深入解析SPRING技术架构与设计原理》&quot;&gt;&lt;a href=&quot;#《Spring技术内幕-深入解析SPRING技术架构与设计原理》&quot; class=&quot;headerlink&quot; title=&quot;《Spring技术内幕-深入解析SPRING技术架构与设计原理》&quot;&gt;&lt;/a&gt;《Spring技术内幕-深入解析SPRING技术架构与设计原理》&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;满打满算准备去公司实习，结果快去了被通知不能少于3个月，5月底又要毕设答辩，没办法所以只能不去了~~&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;既然不去，毕设也差不多了，闲着也是闲着，打算好好看看&lt;strong&gt;《Spring技术内幕》&lt;/strong&gt;这本电子书，然后结合源码做点总结，写些博客~&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;然后便是在博客上加了“阅读”这样一个计划，争取看完这本再看下一本！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《Spring技术内幕-深入解析SPRING技术架构与设计原理》&quot;&gt;&lt;a href=&quot;#《Spring技术内幕-深入解析SPRING技术架构与设计原理》&quot; class=&quot;headerlink&quot; title=&quot;《Spring技术内幕-深入解析SPRING技术架构与设
    
    </summary>
    
      <category term="reading" scheme="http://FlashLightNing.github.io/categories/reading/"/>
    
    
  </entry>
  
  <entry>
    <title>细数JDK里的设计模式</title>
    <link href="http://FlashLightNing.github.io/2016/04/26/%E7%BB%86%E6%95%B0JDK%E9%87%8C%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://FlashLightNing.github.io/2016/04/26/细数JDK里的设计模式/</id>
    <published>2016-04-26T15:02:04.000Z</published>
    <updated>2016-04-28T18:12:04.653Z</updated>
    
    <content type="html">&lt;p&gt;转自：&lt;a href=&quot;http://it.deepinmind.com/设计模式/2014/03/10/细数JDK里的设计模式.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;细数JDK里的设计模式&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;结构型模式：&quot;&gt;&lt;a href=&quot;#结构型模式：&quot; class=&quot;headerlink&quot; title=&quot;结构型模式：&quot;&gt;&lt;/a&gt;结构型模式：&lt;/h1&gt;&lt;h2 id=&quot;适配器模式：&quot;&gt;&lt;a href=&quot;#适配器模式：&quot; class=&quot;headerlink&quot; title=&quot;适配器模式：&quot;&gt;&lt;/a&gt;适配器模式：&lt;/h2&gt;&lt;p&gt;用来把一个接口转化成另一个接口.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.util.Arrays#asList()&lt;/li&gt;
&lt;li&gt;javax.swing.JTable(TableModel)&lt;/li&gt;
&lt;li&gt;java.io.InputStreamReader(InputStream)&lt;/li&gt;
&lt;li&gt;java.io.OutputStreamWriter(OutputStream)&lt;/li&gt;
&lt;li&gt;javax.xml.bind.annotation.adapters.XmlAdapter#marshal()&lt;/li&gt;
&lt;li&gt;javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;桥接模式：&quot;&gt;&lt;a href=&quot;#桥接模式：&quot; class=&quot;headerlink&quot; title=&quot;桥接模式：&quot;&gt;&lt;/a&gt;桥接模式：&lt;/h2&gt;&lt;p&gt;这个模式将抽象和抽象操作的实现进行了解耦，这样使得抽象和实现可以独立地变化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWT (It provides an abstraction layer which maps onto the native OS the windowing support.)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JDBC  &lt;/p&gt;
&lt;h2 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式:&quot;&gt;&lt;/a&gt;组合模式:&lt;/h2&gt;&lt;p&gt;使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受自身类型作为参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.swing.JComponent#add(Component)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.awt.Container#add(Component)&lt;/li&gt;
&lt;li&gt;java.util.Map#putAll(Map)&lt;/li&gt;
&lt;li&gt;java.util.List#addAll(Collection)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Set#addAll(Collection)&lt;/p&gt;
&lt;h2 id=&quot;装饰者模式：&quot;&gt;&lt;a href=&quot;#装饰者模式：&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式：&quot;&gt;&lt;/a&gt;装饰者模式：&lt;/h2&gt;&lt;p&gt;动态的给一个对象附加额外的功能，这也是子类的一种替代方式。可以看到，在创建一个类型的时候，同时也传入同一类型的对象。这在JDK里随处可见，你会发现它无处不在，所以下面这个列表只是一小部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.io.BufferedInputStream(InputStream)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.io.DataInputStream(InputStream)&lt;/li&gt;
&lt;li&gt;java.io.BufferedOutputStream(OutputStream)&lt;/li&gt;
&lt;li&gt;java.util.zip.ZipOutputStream(OutputStream)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Collections#checkedList|Map|Set|SortedSet|SortedMap&lt;/p&gt;
&lt;h2 id=&quot;门面模式：&quot;&gt;&lt;a href=&quot;#门面模式：&quot; class=&quot;headerlink&quot; title=&quot;门面模式：&quot;&gt;&lt;/a&gt;门面模式：&lt;/h2&gt;&lt;p&gt;给一组组件，接口，抽象，或者子系统提供一个简单的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.Class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.faces.webapp.FacesServlet&lt;/p&gt;
&lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h2&gt;&lt;p&gt;使用缓存来加速大量小对象的访问时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.Integer#valueOf(int)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.lang.Boolean#valueOf(boolean)&lt;/li&gt;
&lt;li&gt;java.lang.Byte#valueOf(byte)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.Character#valueOf(char)&lt;/p&gt;
&lt;h2 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h2&gt;&lt;p&gt;代理模式是用一个简单的对象来代替一个复杂的或者创建耗时的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.reflect.Proxy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RMI&lt;/p&gt;
&lt;h1 id=&quot;创建模式&quot;&gt;&lt;a href=&quot;#创建模式&quot; class=&quot;headerlink&quot; title=&quot;创建模式&quot;&gt;&lt;/a&gt;创建模式&lt;/h1&gt;&lt;h2 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h2&gt;&lt;p&gt;抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型。它使得应用程序能够和使用的框架的具体实现进行解耦。这在JDK或者许多框架比如Spring中都随处可见。它们也很容易识别，一个创建新对象的方法，返回的却是接口或者抽象类的，就是抽象工厂模式了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Calendar#getInstance()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.util.Arrays#asList()&lt;/li&gt;
&lt;li&gt;java.util.ResourceBundle#getBundle()&lt;/li&gt;
&lt;li&gt;java.sql.DriverManager#getConnection()&lt;/li&gt;
&lt;li&gt;java.sql.Connection#createStatement()&lt;/li&gt;
&lt;li&gt;java.sql.Statement#executeQuery()&lt;/li&gt;
&lt;li&gt;java.text.NumberFormat#getInstance()&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.xml.transform.TransformerFactory#newInstance()&lt;/p&gt;
&lt;h2 id=&quot;建造模式-Builder&quot;&gt;&lt;a href=&quot;#建造模式-Builder&quot; class=&quot;headerlink&quot; title=&quot;建造模式(Builder)&quot;&gt;&lt;/a&gt;建造模式(Builder)&lt;/h2&gt;&lt;p&gt;定义了一个新的类来构建另一个类的实例，以简化复杂对象的创建。建造模式通常也使用方法链接来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.StringBuilder#append()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.lang.StringBuffer#append()&lt;/li&gt;
&lt;li&gt;java.sql.PreparedStatement&lt;/li&gt;
&lt;li&gt;javax.swing.GroupLayout.Group#addComponent() &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工厂方法&lt;br&gt;就是一个返回具体对象的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.lang.Proxy#newProxyInstance()&lt;/li&gt;
&lt;li&gt;java.lang.Object#toString()&lt;/li&gt;
&lt;li&gt;java.lang.Class#newInstance()&lt;/li&gt;
&lt;li&gt;java.lang.reflect.Array#newInstance()&lt;/li&gt;
&lt;li&gt;java.lang.reflect.Constructor#newInstance()&lt;/li&gt;
&lt;li&gt;java.lang.Boolean#valueOf(String)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.Class#forName()&lt;/p&gt;
&lt;h2 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h2&gt;&lt;p&gt;使得类的实例能够生成自身的拷贝。如果创建一个对象的实例非常复杂且耗时时，就可以使用这种模式，而不重新创建一个新的实例，你可以拷贝一个对象并直接修改它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.Object#clone()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.Cloneable&lt;/p&gt;
&lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;p&gt;用来确保类只有一个实例。Joshua Bloch在Effetive Java中建议到，还有一种方法就是使用枚举。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.Runtime#getRuntime()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.awt.Toolkit#getDefaultToolkit()&lt;/li&gt;
&lt;li&gt;java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment()&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.awt.Desktop#getDesktop()&lt;/p&gt;
&lt;h1 id=&quot;行为模式&quot;&gt;&lt;a href=&quot;#行为模式&quot; class=&quot;headerlink&quot; title=&quot;行为模式&quot;&gt;&lt;/a&gt;行为模式&lt;/h1&gt;&lt;h2 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h2&gt;&lt;p&gt;通过把请求从一个对象传递到链条中下一个对象的方式，直到请求被处理完毕，以实现对象间的解耦。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.logging.Logger#log()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.servlet.Filter#doFilter()&lt;/p&gt;
&lt;h2 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h2&gt;&lt;p&gt;将操作封装到对象内，以便存储，传递和返回。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.Runnable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.swing.Action&lt;/p&gt;
&lt;h2 id=&quot;解释器模式&quot;&gt;&lt;a href=&quot;#解释器模式&quot; class=&quot;headerlink&quot; title=&quot;解释器模式&quot;&gt;&lt;/a&gt;解释器模式&lt;/h2&gt;&lt;p&gt;这个模式通常定义了一个语言的语法，然后解析相应语法的语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Pattern&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.text.Normalizer&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.text.Format&lt;/p&gt;
&lt;h2 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式&quot;&gt;&lt;/a&gt;迭代器模式&lt;/h2&gt;&lt;p&gt;提供一个一致的方法来顺序访问集合中的对象，这个方法与底层的集合的具体实现无关。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Iterator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Enumeration&lt;/p&gt;
&lt;h2 id=&quot;中介者模式&quot;&gt;&lt;a href=&quot;#中介者模式&quot; class=&quot;headerlink&quot; title=&quot;中介者模式&quot;&gt;&lt;/a&gt;中介者模式&lt;/h2&gt;&lt;p&gt;通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Timer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.util.concurrent.Executor#execute()&lt;/li&gt;
&lt;li&gt;java.util.concurrent.ExecutorService#submit()&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.lang.reflect.Method#invoke()&lt;/p&gt;
&lt;h2 id=&quot;备忘录模式&quot;&gt;&lt;a href=&quot;#备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式&quot;&gt;&lt;/a&gt;备忘录模式&lt;/h2&gt;&lt;p&gt;生成对象状态的一个快照，以便对象可以恢复原始状态而不用暴露自身的内容。Date对象通过自身内部的一个long值来实现备忘录模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Date&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.io.Serializable&lt;/p&gt;
&lt;h2 id=&quot;空对象模式&quot;&gt;&lt;a href=&quot;#空对象模式&quot; class=&quot;headerlink&quot; title=&quot;空对象模式&quot;&gt;&lt;/a&gt;空对象模式&lt;/h2&gt;&lt;p&gt;这个模式通过一个无意义的对象来代替没有对象这个状态。它使得你不用额外对空对象进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Collections#emptyList()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.util.Collections#emptyMap()&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Collections#emptySet()&lt;/p&gt;
&lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;p&gt;它使得一个对象可以灵活的将消息发送给感兴趣的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.EventListener&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;javax.servlet.http.HttpSessionBindingListener&lt;/li&gt;
&lt;li&gt;javax.servlet.http.HttpSessionAttributeListener&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.faces.event.PhaseListener&lt;/p&gt;
&lt;h2 id=&quot;状态模式&quot;&gt;&lt;a href=&quot;#状态模式&quot; class=&quot;headerlink&quot; title=&quot;状态模式&quot;&gt;&lt;/a&gt;状态模式&lt;/h2&gt;&lt;p&gt;通过改变对象内部的状态，使得你可以在运行时动态改变一个对象的行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Iterator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.faces.lifecycle.LifeCycle#execute()&lt;/p&gt;
&lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;p&gt;使用这个模式来将一组算法封装成一系列对象。通过传递这些对象可以灵活的改变程序的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Comparator#compare()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;javax.servlet.http.HttpServlet&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.servlet.Filter#doFilter()&lt;/p&gt;
&lt;h2 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h2&gt;&lt;p&gt;让子类可以重写方法的一部分，而不是整个重写，你可以控制子类需要重写那些操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.Collections#sort()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;java.io.InputStream#skip()&lt;/li&gt;
&lt;li&gt;java.io.InputStream#read()&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java.util.AbstractList#indexOf()&lt;/p&gt;
&lt;h2 id=&quot;访问者模式&quot;&gt;&lt;a href=&quot;#访问者模式&quot; class=&quot;headerlink&quot; title=&quot;访问者模式&quot;&gt;&lt;/a&gt;访问者模式&lt;/h2&gt;&lt;p&gt;提供一个方便的可维护的方式来操作一组对象。它使得你在不改变操作的对象前提下，可以修改或者扩展对象的行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javax.lang.model.element.Element &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;javax.lang.model.element.ElementVisitor&lt;/li&gt;
&lt;li&gt;javax.lang.model.type.TypeMirror &lt;/li&gt;
&lt;li&gt;javax.lang.model.type.TypeVisitor&lt;br&gt;译者注：很多地方可能会存在争议，是否是某种模式其实并不是特别重要，重要的是它们的设计能为改善我们的代码提供一些经验。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;http://it.deepinmind.com/设计模式/2014/03/10/细数JDK里的设计模式.html&quot;&gt;细数JDK里的设计模式&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;结构型模式：&quot;&gt;&lt;a href=&quot;#结构型模式：&quot; class=&quot;headerlink&quot; title=&quot;结构型模式：&quot;&gt;&lt;/a&gt;结构型模式：&lt;/h1&gt;&lt;h2 id=&quot;适配器模式：&quot;&gt;&lt;a href=&quot;#适配器模式：&quot; class=&quot;headerlink&quot; title=&quot;适配器模式：&quot;&gt;&lt;/a&gt;适配器模式：&lt;/h2&gt;&lt;p&gt;用来把一个接口转化成另一个接口.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.util.Arrays#asList()&lt;/li&gt;
&lt;li&gt;javax.swing.JTable(TableModel)&lt;/li&gt;
&lt;li&gt;java.io.InputStreamReader(InputStream)&lt;/li&gt;
&lt;li&gt;java.io.OutputStreamWriter(OutputStream)&lt;/li&gt;
&lt;li&gt;javax.xml.bind.annotation.adapters.XmlAdapter#marshal()&lt;/li&gt;
&lt;li&gt;javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://FlashLightNing.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design-patterns" scheme="http://FlashLightNing.github.io/tags/design-patterns/"/>
    
      <category term="java" scheme="http://FlashLightNing.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式:观察者模式(Observer)</title>
    <link href="http://FlashLightNing.github.io/2016/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-Observer/"/>
    <id>http://FlashLightNing.github.io/2016/04/25/设计模式-观察者模式-Observer/</id>
    <published>2016-04-25T07:26:41.000Z</published>
    <updated>2016-04-25T10:33:23.528Z</updated>
    
    <content type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;一个软件系统里面包含了各种对象，就像一片欣欣向荣的森林充满了各种生物一样。在一片森林中，各种生物彼此依赖和约束，形成一个个生物链。一种生物的状态变化会造成其他一些生物的相应行动，每一个生物都处于别的生物的互动之中。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;同样，一个软件系统常常要求在某一个对象的状态发生变化的时候，某些其他的对象做出相应的改变。做到这一点的设计方案有很多，但是为了使系统能够易于复用，应该选择低耦合度的设计方案。减少对象之间的耦合有利于系统的复用，但是同时设计师需要使这些低耦合度的对象之间能够维持行动的协调一致，保证高度的协作。观察者模式是满足这一要求的各种设计方案中最重要的一种。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。&lt;/strong&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用情况：&quot;&gt;&lt;a href=&quot;#使用情况：&quot; class=&quot;headerlink&quot; title=&quot;使用情况：&quot;&gt;&lt;/a&gt;使用情况：&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;改变一个对象的状态会导致其他对象状态的改变，并且需要监听这些改变的时候，就可以考虑用这种模式。&lt;/strong&gt;其实就是在该对象中有一个数组，里面存放了需要通知的对象，然后每当该对象发生一些状态改变的时候，就调用需要通知的对象的update()方法，从而达到了通知的目的&lt;br&gt;Java中的实现：&lt;br&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java.util.Observer&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;示例1：&quot;&gt;&lt;a href=&quot;#示例1：&quot; class=&quot;headerlink&quot; title=&quot;示例1：&quot;&gt;&lt;/a&gt;示例1：&lt;/h2&gt;&lt;h3 id=&quot;观察者：&quot;&gt;&lt;a href=&quot;#观察者：&quot; class=&quot;headerlink&quot; title=&quot;观察者：&quot;&gt;&lt;/a&gt;观察者：&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;观察者是根据被观察者对象的改变而对自己也做一些更新，比如父亲观察着小孩，如果小孩哭了，则父亲就需要去照看小孩，那么父亲就需要有一个update()方法，当小孩哭的时候，调用父亲的这个update()方法，然后父亲就会去照看。  &lt;/p&gt;
&lt;h3 id=&quot;被观察者：&quot;&gt;&lt;a href=&quot;#被观察者：&quot; class=&quot;headerlink&quot; title=&quot;被观察者：&quot;&gt;&lt;/a&gt;被观察者：&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;1.&lt;strong&gt;它需要有一个数组，里面存放了需要通知的观察者对象&lt;/strong&gt;，然后有一个addObserver(Observer obs) 和一个removeObserver(Observer obs)方法，可以添加或删除一个观察者.比如数组里面有一个“父亲”对象和“母亲对象”&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;2.它需要有一个&lt;strong&gt;notifyObservers()&lt;/strong&gt;方法，具体实现是获取到前面那个数组里面的每一个观察者对象，然后依次调用观察者对象的&lt;strong&gt;update()&lt;/strong&gt;方法，比如调用父亲的update()方法，让父亲来照顾他，调用母亲的update()方法，让母亲来照顾他。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;3.然后比如说小孩有一个cry()的方法，即当他哭的时候，调用notifyObserver()方法，父母就会来照顾他。  &lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;h4 id=&quot;Son类&quot;&gt;&lt;a href=&quot;#Son类&quot; class=&quot;headerlink&quot; title=&quot;Son类&quot;&gt;&lt;/a&gt;Son类&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Observable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Observer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Son&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 观察者数组,存放了需要通知的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;Parents&amp;gt; arraylist = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Parents&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Son&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Son&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 小孩哭的时候&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;crying&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		callObserver(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 添加一个观察者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Parents obj)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;string&quot;&gt;&quot;NULL Observer&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!arraylist.contains(obj)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			arraylist.add(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 删除一个观察者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Parents obj)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arraylist.contains(obj))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			arraylist.remove(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;callObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String argument)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arraylist.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			arraylist.get(i).update(argument);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;观察者接口：&quot;&gt;&lt;a href=&quot;#观察者接口：&quot; class=&quot;headerlink&quot; title=&quot;观察者接口：&quot;&gt;&lt;/a&gt;观察者接口：&lt;/h4&gt;&lt;p&gt;因为每个观察者都必须有update()方法，这样在需要通知的时候才能调用该方法即可，而且需要有一个数组存放该类型的对象&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parents&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String arg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;父亲：&quot;&gt;&lt;a href=&quot;#父亲：&quot; class=&quot;headerlink&quot; title=&quot;父亲：&quot;&gt;&lt;/a&gt;父亲：&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Father&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parents&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String arg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(arg + &lt;span class=&quot;string&quot;&gt;&quot;,father is coming&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;母亲&quot;&gt;&lt;a href=&quot;#母亲&quot; class=&quot;headerlink&quot; title=&quot;母亲:&quot;&gt;&lt;/a&gt;母亲:&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mother&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parents&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String arg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(arg+&lt;span class=&quot;string&quot;&gt;&quot;,mom is coming&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;主程序：&quot;&gt;&lt;a href=&quot;#主程序：&quot; class=&quot;headerlink&quot; title=&quot;主程序：&quot;&gt;&lt;/a&gt;主程序：&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; observer.src.main.java.com.iluwatar.observer.my;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Son son =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Son(&lt;span class=&quot;string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Father father =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Father();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Mother mother =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Mother();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		son.addObserver(father);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		son.addObserver(mother);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		son.crying();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;while father leave home:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		son.removeObserver(father);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		son.crying();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出结果&quot;&gt;&lt;a href=&quot;#输出结果&quot; class=&quot;headerlink&quot; title=&quot;输出结果&quot;&gt;&lt;/a&gt;输出结果&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/observer.png&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;大致就是这样，当然这只是最简单的实现。真正设计的时候，还需要考虑多线程。在&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java.util.Observer&lt;/a&gt;中，对addObserver()和deleteObserver()添加了synchronized关键字，然后存放的数组用的是线程安全的vector,  具体的细节大家可以看java.util.Observer是怎么实现的。  &lt;/p&gt;
&lt;h2 id=&quot;示例2：&quot;&gt;&lt;a href=&quot;#示例2：&quot; class=&quot;headerlink&quot; title=&quot;示例2：&quot;&gt;&lt;/a&gt;示例2：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/observer_1.png&quot;&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;WeatherType是天气类型，Weather是被观察的对象，WeatherObserver是观察者接口，Hobbits和Orcs实现了该接口和该接口的update()方法，因此，可以被添加到观察者队列中。当Weather改变的时候，这两个类就能得到通知。还用到了枚举类，天气是一个枚举类，然后根据不同的天气在观察者中进行switch-case判断然后输出不同结果。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;WeatherType&quot;&gt;&lt;a href=&quot;#WeatherType&quot; class=&quot;headerlink&quot; title=&quot;WeatherType:&quot;&gt;&lt;/a&gt;WeatherType:&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; WeatherType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SUNNY, RAINY, WINDY, COLD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name().toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;WeatherObserver&quot;&gt;&lt;a href=&quot;#WeatherObserver&quot; class=&quot;headerlink&quot; title=&quot;WeatherObserver:&quot;&gt;&lt;/a&gt;WeatherObserver:&lt;/h3&gt;&lt;p&gt;观察者接口:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeatherObserver&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WeatherType currentWeather)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Weather类&quot;&gt;&lt;a href=&quot;#Weather类&quot; class=&quot;headerlink&quot; title=&quot;Weather类&quot;&gt;&lt;/a&gt;Weather类&lt;/h3&gt;&lt;p&gt;被观察的对象&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Weather&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; WeatherType currentWeather;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;WeatherObserver&amp;gt; observers;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Weather&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    currentWeather = WeatherType.SUNNY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WeatherObserver obs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observers.add(obs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WeatherObserver obs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observers.remove(obs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * Makes time pass for weather&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timePasses&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WeatherType[] enumValues = WeatherType.values();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    currentWeather = enumValues[(currentWeather.ordinal() + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % enumValues.length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The weather changed to &quot;&lt;/span&gt; + currentWeather + &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notifyObservers();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;notifyObservers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (WeatherObserver obs : observers) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      obs.update(currentWeather);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;观察者：-1&quot;&gt;&lt;a href=&quot;#观察者：-1&quot; class=&quot;headerlink&quot; title=&quot;观察者：&quot;&gt;&lt;/a&gt;观察者：&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Orcs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Orcs&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeatherObserver&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WeatherType currentWeather)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (currentWeather) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; COLD:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The orcs are freezing cold.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; RAINY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The orcs are dripping wet.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SUNNY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The sun hurts the orcs&#39; eyes.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; WINDY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The orc smell almost vanishes in the wind.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Hobbits&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hobbits&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeatherObserver&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WeatherType currentWeather)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (currentWeather) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; COLD:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The hobbits are shivering in the cold weather.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; RAINY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The hobbits look for cover from the rain.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SUNNY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The happy hobbits bade in the warm sun.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; WINDY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The hobbits hold their hats tightly in the windy weather.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;主程序：-1&quot;&gt;&lt;a href=&quot;#主程序：-1&quot; class=&quot;headerlink&quot; title=&quot;主程序：&quot;&gt;&lt;/a&gt;主程序：&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * Program entry point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; args command line args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;start&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Weather weather = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Weather();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weather.addObserver(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Orcs());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weather.addObserver(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hobbits());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weather.timePasses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weather.timePasses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weather.timePasses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weather.timePasses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;end&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Generic observer inspired by Java Generics and Collection by Naftalin &amp;amp; Wadler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\n--Running generic version--&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GWeather gWeather = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GWeather();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gWeather.addObserver(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GOrcs());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gWeather.addObserver(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GHobbits());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gWeather.timePasses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gWeather.timePasses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gWeather.timePasses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gWeather.timePasses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;一个软件系统里面包含了各种对象，就像一片欣欣向荣的森林充满了各种生物一样。在一片森林中，各种生物彼此依赖和约束，形成一个个生物链。一种生物的状态变化会造成其他一些生物的相应行动，每一个生物都处于别的生物的互动之中。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;同样，一个软件系统常常要求在某一个对象的状态发生变化的时候，某些其他的对象做出相应的改变。做到这一点的设计方案有很多，但是为了使系统能够易于复用，应该选择低耦合度的设计方案。减少对象之间的耦合有利于系统的复用，但是同时设计师需要使这些低耦合度的对象之间能够维持行动的协调一致，保证高度的协作。观察者模式是满足这一要求的各种设计方案中最重要的一种。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="design-patterns" scheme="http://FlashLightNing.github.io/tags/design-patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式:单例模式5种实现方式</title>
    <link href="http://FlashLightNing.github.io/2016/04/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F5%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://FlashLightNing.github.io/2016/04/21/单例模式5种实现方式/</id>
    <published>2016-04-21T15:13:10.000Z</published>
    <updated>2016-04-25T16:30:11.171Z</updated>
    
    <content type="html">&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在github上看到一个项目，实现了36种设计模式，就把它fork下来，一个一个学，然后也可以学习参考别人写的代码。&lt;br&gt;地址：&lt;a href=&quot;https://github.com/iluwatar/java-design-patterns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iluwatar/java-design-patterns&lt;/a&gt;&lt;br&gt;(以下代码都转自上面的项目)&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;实现单例模式的思路是：&lt;strong&gt;一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）&lt;/strong&gt;；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;br&gt;单例模式在多线程的应用场合下必须小心使用。&lt;strong&gt;如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则&lt;/strong&gt;。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。&lt;br&gt;参考：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;常见的是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.静态内部类（也叫饿汉模式）&lt;br&gt;2.懒汉模式&lt;br&gt;3.双重锁保证线程安全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有另外3种写法:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4.序列化实现&lt;br&gt;5.枚举实现  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;静态内部类&quot;&gt;&lt;a href=&quot;#静态内部类&quot; class=&quot;headerlink&quot; title=&quot;静态内部类&quot;&gt;&lt;/a&gt;静态内部类&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//也叫饿汉模式，线程安全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IvoryTower&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * 静态变量属于类，不属于任何独立的对象，所以无需创建类的实例就可以访问静态变量。之所以会产生这样的结果，是因为编译器只为整个类创建了一个静态变量的副本，也就是只分配一个内存空间，虽然有多个实例，但这些实例共享该内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; IvoryTower INSTANCE = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IvoryTower();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * 私有化构造器，使得不能在外部调用构造器，也就不能在外部使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   IvoryTower it =new IvoryTower();的方式创建对象，保证了实例化对象只有一个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IvoryTower&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * 用来返回实例化对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; instance of the singleton.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IvoryTower &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; INSTANCE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;懒汉模式&quot;&gt;&lt;a href=&quot;#懒汉模式&quot; class=&quot;headerlink&quot; title=&quot;懒汉模式&quot;&gt;&lt;/a&gt;懒汉模式&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;和上面的不同之处在于没有在类加载的时候就创建对象，而是在真正要使用到这个对象的时候再去获取，优点在于如果这个创建对象过程很费时，那么一开始就创建会浪费较多时间，比如几分钟或者几个小时，万一创建好之后还用不到，那不是坑爹~~ 还有就是比如，我的类的构造函数中，有一些事可能需要依赖于别的类干的一些事（比如某个配置文件，或是某个被其它类创建的资源），我们希望他能在我第一次getInstance()时才被真正的创建。这样，我们可以控制真正的类创建的时刻，而不是把类的创建委托给了类装载器。于是有了懒加载。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadSafeLazyLoadedIvoryTower&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ThreadSafeLazyLoadedIvoryTower instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadSafeLazyLoadedIvoryTower&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; ThreadSafeLazyLoadedIvoryTower &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;   &lt;span class=&quot;comment&quot;&gt;//(1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;//(2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadSafeLazyLoadedIvoryTower();          &lt;span class=&quot;comment&quot;&gt;//(3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;注意getInstance()方法处的synchronized关键字，如果没有这个关键字，这个类就是线程不安全的。&lt;/strong&gt;&lt;br&gt;懒汉模式在多线程环境下是不安全的，为什么这么说呢？假设现在有线程A，线程B，然后在线程A执行到代码(1)处之后，在代码(3)之前由于线程调度使得A暂停运行，一直停留在（2）处。&lt;strong&gt;这时候，如果线程B也执行到了代码(1)处的判断，由于线程A还尚未new对象就被暂停了，使得现在的instance还是null，所以B进行判断之后也会得到instance=null，然后也进入了代码(2)，(3)处，顺利的new了一个对象。这时候如果线程A恢复运行，又会new一个对象，就导致了不止一个实例化对象&lt;/strong&gt;。  但是如果在方法前加了一个synchronized关键字，在多线程环境下，它会使这个方法同时只被一个线程调用，那样就不存在线程A执行到一半被暂停转而被线程B执行，导致最后实例化了2个对象。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;但是思考一下，&lt;strong&gt;其实只需要在第一次实例化对象的时候才需要锁，在之后的调用的时候是不需要的，而上面这种写法使得每次调用都是加锁。&lt;/strong&gt;优化方法就是双重锁，什么意思呢？就是对方法不加synchronized，但是在第一次判断instance==null，如果为null,再加锁，这样就使得加锁过程只会执行一次，一旦被执行过一次，instance！=null之后，就不会再次执行这个锁，就可以提高点效率!&lt;/p&gt;
&lt;h2 id=&quot;双重锁&quot;&gt;&lt;a href=&quot;#双重锁&quot; class=&quot;headerlink&quot; title=&quot;双重锁&quot;&gt;&lt;/a&gt;双重锁&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadSafeDoubleCheckLocking&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; ThreadSafeDoubleCheckLocking instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * private constructor to prevent client from instantiating.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadSafeDoubleCheckLocking&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// to prevent instantiating by Reflection call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;Already initialized.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * Public accessor.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; an instance of the class.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ThreadSafeDoubleCheckLocking &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// local variable increases performance by 25 percent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Joshua Bloch &quot;Effective Java, Second Edition&quot;, p. 283-284&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ThreadSafeDoubleCheckLocking result = instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (ThreadSafeDoubleCheckLocking.class) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          instance = result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadSafeDoubleCheckLocking();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有2种是序列化的方式和枚举方式&lt;/p&gt;
&lt;h2 id=&quot;枚举方式：&quot;&gt;&lt;a href=&quot;#枚举方式：&quot; class=&quot;headerlink&quot; title=&quot;枚举方式：&quot;&gt;&lt;/a&gt;枚举方式：&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; EnumIvoryTower &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  INSTANCE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getDeclaringClass().getCanonicalName() + &lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt; + hashCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;重写toString()只是为了测试的时候方便看到结果。枚举的方式确实简单明了。&lt;strong&gt;默认枚举实例的创建是线程安全的，所以不需要担心线程安全的问题。但是在枚举中的其他任何方法的线程安全由程序员自己负责。&lt;/strong&gt;还有防止上面的通过反射机制调用私用构造器。&lt;/p&gt;
&lt;h2 id=&quot;序列化的方式&quot;&gt;&lt;a href=&quot;#序列化的方式&quot; class=&quot;headerlink&quot; title=&quot;序列化的方式:&quot;&gt;&lt;/a&gt;序列化的方式:&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitializingOnDemandHolderIdiom&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;number&quot;&gt;1L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitializingOnDemandHolderIdiom&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; InitializingOnDemandHolderIdiom &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HelperHolder.INSTANCE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;readResolve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelperHolder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; InitializingOnDemandHolderIdiom INSTANCE =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InitializingOnDemandHolderIdiom();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;序列化是Java一个强大的功能，它可以将类的信息变成字节的形式存储在硬盘上或者通过socket传输。如果我们将一个单例类序列化，传输，再进行反序列化，那么&lt;strong&gt;如何能保证我们多次反序列化之后只会得到同一个实例化对象呢？&lt;/strong&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;readResolve()方法就是用来保证这一点的！而且这份实例代码里面用了一个静态内部类，然后在这个类里面初始化了一个静态对象。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在github上看到一个项目，实现了36种设计模式，就把它fork下来，一个一个学，然后也可以学习参考别人写的代码。&lt;br&gt;地址：&lt;a href=&quot;https://github.com/iluwatar/java-design-patterns&quot;&gt;https://github.com/iluwatar/java-design-patterns&lt;/a&gt;&lt;br&gt;(以下代码都转自上面的项目)&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。&lt;br&gt;
    
    </summary>
    
    
      <category term="design-patterns" scheme="http://FlashLightNing.github.io/tags/design-patterns/"/>
    
  </entry>
  
  <entry>
    <title>redis简单使用及用JSON字符串的方式解决对象存储问题</title>
    <link href="http://FlashLightNing.github.io/2016/04/12/redis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%94%A8JSON%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://FlashLightNing.github.io/2016/04/12/redis简单使用及用JSON字符串的方式解决对象存储问题/</id>
    <published>2016-04-12T09:39:31.000Z</published>
    <updated>2016-04-12T13:14:15.975Z</updated>
    
    <content type="html">&lt;p&gt; &amp;#160; &amp;#160; &amp;#160; &amp;#160;想在windows下使用熟悉一下redis，首先在它的github上下载压缩包：&lt;a href=&quot;https://github.com/dmajkic/redis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/dmajkic/redis&lt;/a&gt;  下载到本地之后解压缩打开，里面有32位和64位2个文件夹，我的是64位系统，所以把64-bit文件夹里面的文件复制到最外层目录（D：/redis）下，然后就可以开始安装配置了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装配置&quot;&gt;&lt;a href=&quot;#安装配置&quot; class=&quot;headerlink&quot; title=&quot;安装配置&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装配置&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;打开cmd窗口，切换到安装目录下(D:/redis)，然后 运行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-server.exe redis.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 它会显示如下类似的页面：&lt;br&gt; &lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2014/11/redis-win.jpg&quot;&gt;&lt;br&gt; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &lt;strong&gt;这时候，再打开一个cmd窗口，原先的不能关闭，不然就不能访问服务端了。&lt;/strong&gt;&lt;br&gt; 在另一个cmd窗口下：切换到redis目录，运行：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-cli.exe -h 127.0.0.1 -p 6379&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 这样就算开启了客户端，然后可以在这个界面上设置一些键值对，简单的比如：&lt;br&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/redis1.png&quot;&gt;&lt;br&gt; &amp;#160; &amp;#160; &amp;#160; &amp;#160;第一句直接连接报错：不能连接上127.0.0.1是因为服务端没开，也就是前面的 &lt;strong&gt;redis-server.exe redis.conf&lt;/strong&gt;没有在另外一个窗口输入过 。后面再打开一个窗口输入即可，&lt;br&gt;这样就算是完成了安装配置也简单的测试了一下它的使用，比如设置key-value并取出，并没有问题。&lt;/p&gt;
&lt;h2 id=&quot;eclipse中使用redis&quot;&gt;&lt;a href=&quot;#eclipse中使用redis&quot; class=&quot;headerlink&quot; title=&quot;eclipse中使用redis&quot;&gt;&lt;/a&gt;&lt;strong&gt;eclipse中使用redis&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt; &amp;#160; &amp;#160; &amp;#160; &amp;#160;昨天刚学了maven的使用，今天刚好试一下：&lt;br&gt;用昨天的方法，在 &lt;a href=&quot;http://search.maven.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://search.maven.org/&lt;/a&gt;  中查redis，得到它的maven配置&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;version&amp;gt;2.8.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加到pom.xml文件中即可，然后在程序中就可以使用啦~&lt;br&gt;比如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Jedis edis = new Jedis(&amp;quot;localhost&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(edis.ping());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;edis.set(&amp;quot;name&amp;quot;, &amp;quot;redis&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;value=&amp;quot; + edis.get(&amp;quot;name&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;edis.lpush(&amp;quot;nameList&amp;quot;, &amp;quot;redis&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;edis.lpush(&amp;quot;nameList&amp;quot;, &amp;quot;yueda&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; list = edis.lrange(&amp;quot;nameList&amp;quot;, 0, 5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (int i = 0; i &amp;lt; list.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.out.println(list.get(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 只是简单的试了一些string和list的方法。在程序中添加的key-value可以在cmd界面中get到。&lt;/p&gt;
&lt;h2 id=&quot;redis存储对象&quot;&gt;&lt;a href=&quot;#redis存储对象&quot; class=&quot;headerlink&quot; title=&quot;redis存储对象&quot;&gt;&lt;/a&gt;&lt;strong&gt;redis存储对象&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt; &amp;#160; &amp;#160; &amp;#160; &amp;#160;在Java程序中，redis提供的方法插入的key,value要么是string,要么就是byte[]数组。那如果是要插入的value是个对象怎么办呢？网上的方法大多是对这个对象进行序列化。序列化还有一个作用是可以将对象序列化之后通过socket进行传输。那么，JSON也是一个进行数据交换的格式。何不将对象转为JSON字符串然后当作String存在Value中也是可以的。&lt;br&gt;我用的是alibaba的fastjson,得到它的坐标:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;version&amp;gt;1.2.8&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加到pom.xml中就可以使用了：&lt;br&gt;新建一个POJO:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.lumingfeng.hellomaven;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Student &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public int getAge() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void setAge(int age) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String getName() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void setName(String name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String getAddress() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void setAddress(String address) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.address = address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Student() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Student(int age, String name, String address) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.address = address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String toString() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return &amp;quot;Student [age=&amp;quot; + age + &amp;quot;, name=&amp;quot; + name + &amp;quot;, address=&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				+ address + &amp;quot;]&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在主程序中：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Student student = new Student(20, &amp;quot;hha&amp;quot;, &amp;quot;320&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String s = JSON.toJSONString(student);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		edis.set(&amp;quot;student&amp;quot;, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String get = edis.get(&amp;quot;student&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Object object = JSON.parseObject(get, Student.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&amp;quot;ss=&amp;quot; + object);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	得到的输出结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ss=Student [age=20, name=hha, address=320]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意，在POJO类中必须要有每个属性的set(),get()方法，这样才能将对象完整得转为字符串，不然会得到一个空的字符串！&lt;/strong&gt;&lt;br&gt;这样就完成了redis存储对象。我觉得这样也是一种不错的方法，而且也便于从redis中获取到对象字符串之后进行传输。比如在一些场景中，后端服务器得到对象之后要将数据传给前端的时候，就可以尝试用这种方法&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; &amp;#160; &amp;#160; &amp;#160; &amp;#160;想在windows下使用熟悉一下redis，首先在它的github上下载压缩包：&lt;a href=&quot;https://github.com/dmajkic/redis&quot;&gt;https://github.com/dmajkic/redis&lt;/a&gt;  下载到本地之后解压缩打开，里面有32位和64位2个文件夹，我的是64位系统，所以把64-bit文件夹里面的文件复制到最外层目录（D：/redis）下，然后就可以开始安装配置了。&lt;br&gt;
    
    </summary>
    
    
      <category term="入门" scheme="http://FlashLightNing.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="redis" scheme="http://FlashLightNing.github.io/tags/redis/"/>
    
      <category term="json" scheme="http://FlashLightNing.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Maven下载,配置,创建项目</title>
    <link href="http://FlashLightNing.github.io/2016/04/11/Maven%E4%B8%8B%E8%BD%BD-%E9%85%8D%E7%BD%AE-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://FlashLightNing.github.io/2016/04/11/Maven下载-配置-创建项目/</id>
    <published>2016-04-11T09:57:16.000Z</published>
    <updated>2016-04-25T04:22:02.352Z</updated>
    
    <content type="html">&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;Apache Maven ，是一个软件（特别是 Java 软件）项目管理及自动构建工具，由Apache软件基金会所提供。基于项目对象模型（缩写：POM）概念， Maven 利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。曾是Jakarta项目的子项目，现为独立Apache项目。 &lt;strong&gt;Maven的好处就是用一个pom.xml来代替对jar包的管理，所依赖的jar包都配置在该文件中，这样，在项目迁移或者人员交替的过程中，避免了jar包不同或者版本不同导致的问题。&lt;/strong&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;maven的安装配置&lt;/li&gt;
&lt;li&gt;Maven的资源库&lt;/li&gt;
&lt;li&gt;使用Maven创建Java项目&lt;/li&gt;
&lt;li&gt;打包&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Maven的安装配置&quot;&gt;&lt;a href=&quot;#Maven的安装配置&quot; class=&quot;headerlink&quot; title=&quot;Maven的安装配置&quot;&gt;&lt;/a&gt;Maven的安装配置&lt;/h2&gt;&lt;p&gt;想要安装 Apache Maven 在Windows 系统上, 只需要下载 Maven 的 zip 文件，并将其解压到你想安装的目录，并配置 Windows 环境变量。&lt;br&gt;注：Maven 3.2 要求 JDK 1.6 或以上版本, 而Maven 3.0/3.1 需要 JDK 1.5 或以上&lt;/p&gt;
&lt;h3 id=&quot;1-JDK-和-JAVA-HOME&quot;&gt;&lt;a href=&quot;#1-JDK-和-JAVA-HOME&quot; class=&quot;headerlink&quot; title=&quot;1.JDK 和 JAVA_HOME&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.JDK 和 JAVA_HOME&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;确保已安装JDK，并 “JAVA_HOME” 变量已加入作为 Windows 环境变量。&lt;br&gt;&lt;img src=&quot;http://www.yiibai.com/uploads/tutorial/20151125/1-151125203211622.png&quot; width=&quot;600px&quot; height=&quot;400px&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-下载Apache-Maven&quot;&gt;&lt;a href=&quot;#2-下载Apache-Maven&quot; class=&quot;headerlink&quot; title=&quot;2.下载Apache Maven&quot;&gt;&lt;/a&gt;&lt;strong&gt;2.下载Apache Maven&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;官网下载链接 :&lt;a href=&quot;http://maven.apache.org/download.cgi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://maven.apache.org/download.cgi&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://www.yiibai.com/uploads/tutorial/20151125/1-15112520322M44.png&quot; width=&quot;600px&quot; height=&quot;400px&quot;&gt;&lt;br&gt;将它解压到你要安装 Maven 的文件夹。假设你解压缩到这个文件夹 –  D:\software\yiibai.com\apache-maven&lt;br&gt;&lt;img src=&quot;http://www.yiibai.com/uploads/tutorial/20151125/1-1511252033545L.png&quot; width=&quot;600px&quot; height=&quot;400px&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-添加-M2-HOME-和-MAVEN-HOME&quot;&gt;&lt;a href=&quot;#3-添加-M2-HOME-和-MAVEN-HOME&quot; class=&quot;headerlink&quot; title=&quot;3.添加 M2_HOME 和 MAVEN_HOME&quot;&gt;&lt;/a&gt;&lt;strong&gt;3.添加 M2_HOME 和 MAVEN_HOME&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;添加 M2_HOME 和 MAVEN_HOME 环境变量在Windows，并将其指向你的 Maven 文件夹。&lt;br&gt;&lt;img src=&quot;http://www.yiibai.com/uploads/tutorial/20151125/1-151125203424530.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-添加到环境变量-PATH&quot;&gt;&lt;a href=&quot;#4-添加到环境变量-PATH&quot; class=&quot;headerlink&quot; title=&quot;4.添加到环境变量 - PATH&quot;&gt;&lt;/a&gt;&lt;strong&gt;4.添加到环境变量 - PATH&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;更新 PATH 变量，添加 Maven bin 文件夹到 PATH 的最后 – %M2_HOME%\bin, 这样就可以到处运行 Maven 命令了。&lt;br&gt;&lt;img src=&quot;http://www.yiibai.com/uploads/tutorial/20151125/1-151125203445R1.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-验证是否安装成功&quot;&gt;&lt;a href=&quot;#5-验证是否安装成功&quot; class=&quot;headerlink&quot; title=&quot;5.验证是否安装成功&quot;&gt;&lt;/a&gt;&lt;strong&gt;5.验证是否安装成功&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;运行-&amp;gt;cmd-&amp;gt;mvn –version&lt;br&gt;如果得到输出maven版本信息，即表示安装成功。&lt;/p&gt;
&lt;h2 id=&quot;Maven的资源库&quot;&gt;&lt;a href=&quot;#Maven的资源库&quot; class=&quot;headerlink&quot; title=&quot;Maven的资源库&quot;&gt;&lt;/a&gt;&lt;strong&gt;Maven的资源库&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Maven的资源库有2种，一个是本地资源库，一个是中央存储库。&lt;br&gt;当建立一个Maven项目时，Maven会检查你得pom.xml文件，确定需要哪些依赖jar包。然后会先在本地资源库查找，若不存在则会去中央存储库下载。&lt;br&gt;Maven的本地资源库是用来存储所有项目的依赖关系(插件jar和其他文件，这些文件被Maven下载)到本地文件夹。很简单，当你建立一个Maven项目，所有相关文件将被存储在你的Maven本地仓库。&lt;br&gt;中央存储库的默认下载地址在: &lt;a href=&quot;http://repo1.maven.org/maven2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://repo1.maven.org/maven2/&lt;/a&gt;.&lt;br&gt;可以在 &lt;a href=&quot;http://search.maven.org/网站搜索所需的jar包的坐标。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://search.maven.org/网站搜索所需的jar包的坐标。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;在maven项目中添加中央存储库里面的jar包&quot;&gt;&lt;a href=&quot;#在maven项目中添加中央存储库里面的jar包&quot; class=&quot;headerlink&quot; title=&quot;在maven项目中添加中央存储库里面的jar包&quot;&gt;&lt;/a&gt;&lt;strong&gt;在maven项目中添加中央存储库里面的jar包&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;比如需要log4j的jar包，查找得到:&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/image/maven.png&quot;&gt;.&lt;br&gt;第一列是GroupId,第二列是ArtifactId,第三列是版本，最后一列是下载。&lt;br&gt;选到第一个：org.apache.logging.log4j，然后&lt;strong&gt;点它的Latest Version&lt;/strong&gt;，就出现一个新的页面，然后它的maven依赖就在左边显示，当然还有一些其他依赖的写法.&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/111.png&quot;&gt;.看到log4j的maven依赖写法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后添加到你的maven项目中的pom.xml即可。要和之前的dependency合并，即都要写在一个&lt;dependency&gt;&lt;/dependency&gt;里面。然后就可以在你的项目里面用jar包对应的API了~~&lt;/p&gt;
&lt;h3 id=&quot;那如果是添加自己开发的依赖包怎么办呢？&quot;&gt;&lt;a href=&quot;#那如果是添加自己开发的依赖包怎么办呢？&quot; class=&quot;headerlink&quot; title=&quot;那如果是添加自己开发的依赖包怎么办呢？&quot;&gt;&lt;/a&gt;&lt;strong&gt;那如果是添加自己开发的依赖包怎么办呢？&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.在 src 文件夹下添加 lib 文件夹&lt;br&gt;2.将所需要的jar包放到这个文件夹下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在咱们的工程目录大概是这样的：&lt;br&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/maven2.png&quot;&gt;&lt;br&gt;现在你有了自己的工程库（library），通常情况下它会包含一些任何仓库无法使用，并且 maven 也无法下载的 jar 文件。如果你的代码正在使用这个库，那么 Maven 的构建过程将会失败，因为在编译阶段它不能下载或者引用这个库。&lt;/p&gt;
&lt;p&gt;为了处理这种情况，让我们用以下方式，将这个外部依赖添加到 maven pom.xml 中。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;com.lumingfeng&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;hellomaven&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;name&amp;gt;hellomaven&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;properties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/properties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;log4j-api&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;javabase64-1.3.1&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;javabase64-1.3.1&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;version&amp;gt;1.3.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;scope&amp;gt;system&amp;lt;/scope&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;systemPath&amp;gt;$&amp;#123;basedir&amp;#125;\src\lib\javabase64-1.3.1.jar&amp;lt;/systemPath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;defaultGoal&amp;gt;compile&amp;lt;/defaultGoal&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到是不报错的，&lt;br&gt;上例中， &lt;strong&gt;dependencies&lt;/strong&gt; 的最后一个个 &lt;strong&gt;dependency&lt;/strong&gt; 元素 , 阐明了外部依赖的关键概念。&lt;/p&gt;
&lt;p&gt;外部依赖（library jar location）能够像其他依赖一样在 pom.xml 中配置。&lt;br&gt;&lt;strong&gt;指定 groupId 为 library 的名称。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;指定 artifactId 为 library 的名称。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;指定作用域（scope）为系统。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;指定相对于工程位置的系统路径。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用maven创建java项目&quot;&gt;&lt;a href=&quot;#使用maven创建java项目&quot; class=&quot;headerlink&quot; title=&quot;使用maven创建java项目&quot;&gt;&lt;/a&gt;&lt;strong&gt;使用maven创建java项目&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;对于eclipse软件来说，有个m2eclipse插件有助于创建maven项目：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;m2eclipse Plugin: &lt;a href=&quot;http://m2eclipse.sonatype.org/sites/m2e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://m2eclipse.sonatype.org/sites/m2e&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; Help &amp;gt; Install New Software. 然后输入上面的链接和名字就可以更新插件了。&lt;br&gt; 更新好之后: 新建maven项目，&lt;br&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/maven3.jpg&quot;&gt;&lt;br&gt;&lt;strong&gt;这里选默认的quickstart就行了&lt;/strong&gt;。然后下一步输入Group Id和Artifact Id&lt;br&gt;就算完成了maven项目的创建。项目里面有个pom.xml文件，这个是配置依赖的。配置方法在上面已经介绍了，包括在中心库的和本地的jar包.&lt;br&gt;最后一步是打包:&lt;/p&gt;
&lt;h3 id=&quot;打包：&quot;&gt;&lt;a href=&quot;#打包：&quot; class=&quot;headerlink&quot; title=&quot;打包：&quot;&gt;&lt;/a&gt;&lt;strong&gt;打包：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;在cmd界面下进入该maven项目的目录：然后输入 mvn package&lt;/em&gt;&lt;/strong&gt;,如果没错误就可以打包成功，打包好的在该目录的target文件夹下，有个jar包和class文件，部署到服务器就是靠这些class文件，然后jar包就是maven帮你打包好的，可以在以后的项目中用到.&lt;br&gt;如果打包的时候报错：&lt;br&gt;&lt;strong&gt; No goals have been specified for this build&lt;/strong&gt;&lt;br&gt;在pom.xml中添加以下代码:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;defaultGoal&amp;gt;compile&amp;lt;/defaultGoal&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些就是一个大概的简单maven项目的流程.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;Apache Maven ，是一个软件（特别是 Java 软件）项目管理及自动构建工具，由Apache软件基金会所提供。基于项目对象模型（缩写：POM）概念， Maven 利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。曾是Jakarta项目的子项目，现为独立Apache项目。 &lt;strong&gt;Maven的好处就是用一个pom.xml来代替对jar包的管理，所依赖的jar包都配置在该文件中，这样，在项目迁移或者人员交替的过程中，避免了jar包不同或者版本不同导致的问题。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="maven" scheme="http://FlashLightNing.github.io/tags/maven/"/>
    
      <category term="入门" scheme="http://FlashLightNing.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>混沌图像加密总结(2)</title>
    <link href="http://FlashLightNing.github.io/2016/04/07/%E6%B7%B7%E6%B2%8C%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%AF%86%E6%80%BB%E7%BB%93-2/"/>
    <id>http://FlashLightNing.github.io/2016/04/07/混沌图像加密总结-2/</id>
    <published>2016-04-07T15:32:43.000Z</published>
    <updated>2016-04-07T16:12:54.664Z</updated>
    
    <content type="html">&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;前面说到怎样区分不同类型的图片，参考了这篇博客 :&lt;a href=&quot;http://blog.csdn.net/fenglibing/article/details/7733496&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;表示不同文件类型的魔术数字&lt;/a&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;这里所说的表示不同文件类型的魔术数字，指定是文件的最开头的几个用于唯一区别其它文件类型的字节，有了这些魔术数字，我们就可以很方便的区别不同的文件，这也使得编程变得更加容易&lt;/strong&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;比如，一个JPEG文件，它开头的一些字节可能是类似这样的”ffd8 ffe0 0010 4a46 4946 0001 0101 0047 ……JFIF…..G“，这里”ffd8“就表示了这个文件是一个JPEG类型的文件，”ffe0“表示这是JFIF类型结构。&lt;br&gt;所以我们只需要判断图片开头的几个字节就可以得到它的类型，只要它的开头不等于ffd8，那么它就不是JPEG类型的图片&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static boolean getImageType(String imgPath) throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	File image = new File(imgPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	InputStream is = new FileInputStream(image);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	byte[] bt = new byte[2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	is.read(bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	StringBuilder stringBuilder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (bt == null || bt.length &amp;lt;= 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (int i = 0; i &amp;lt; bt.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int v = bt[i] &amp;amp; 0xFF;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String hv = Integer.toHexString(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (hv.length() &amp;lt; 2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			stringBuilder.append(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		stringBuilder.append(hv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String number = stringBuilder.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.out.println(number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (number.equals(&amp;quot;ffd8&amp;quot;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个方法只是用来判断是否为JPEG类型的图片，如果不是，就把它统一转为JPEG类型的图片：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 将任意类型的转为JPEG类型的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 若已经为JPEG图片,则直接返回原地址;否则返回处理后的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param inputPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param outputPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @throws IOException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String convertPicture(String inputPath, String outputPath,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String type) throws IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	boolean is_Jpeg = getImageType(inputPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (is_Jpeg) &amp;#123;//若已经为JPEG图片,则不用处理,直接返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return inputPath;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RenderedOp src2 = JAI.create(&amp;quot;fileload&amp;quot;, inputPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	OutputStream os2 = new FileOutputStream(outputPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	JPEGEncodeParam param2 = new JPEGEncodeParam();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 指定格式类型，jpg 属于 JPEG 类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ImageEncoder enc2 = ImageCodec.createImageEncoder(&amp;quot;JPEG&amp;quot;, os2, param2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		enc2.encode(src2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		os2.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.out.println(&amp;quot;转换成功&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return outputPath;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这里需要用到几个jar包:&lt;a href=&quot;http://download.csdn.net/detail/xiaozhao3972/2703360&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSDN链接&lt;/a&gt;&lt;br&gt; 如果要将其变成其他类型的图片，如bmp,png，只要将&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```
ImageCodec.createImageEncoder(&amp;quot;JPEG&amp;quot;, os2, param2);
```  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;其中的JPEG换成BMP/PNG即可。完成图像类别的转换之后，就可以开开心心进行传输了&lt;del&gt;，也不会报空指针错误了&lt;/del&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;前面说到怎样区分不同类型的图片，参考了这篇博客 :&lt;a href=&quot;http://blog.csdn.net/fenglibing/article/details/7733496&quot;&gt;表示不同文件类型的魔术数字&lt;/a&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;这里所说的表示不同文件类型的魔术数字，指定是文件的最开头的几个用于唯一区别其它文件类型的字节，有了这些魔术数字，我们就可以很方便的区别不同的文件，这也使得编程变得更加容易&lt;/strong&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;比如，一个JPEG文件，它开头的一些字节可能是类似这样的”ffd8 ffe0 0010 4a46 4946 0001 0101 0047 ……JFIF…..G“，这里”ffd8“就表示了这个文件是一个JPEG类型的文件，”ffe0“表示这是JFIF类型结构。&lt;br&gt;所以我们只需要判断图片开头的几个字节就可以得到它的类型，只要它的开头不等于ffd8，那么它就不是JPEG类型的图片&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://FlashLightNing.github.io/tags/java/"/>
    
      <category term="图像加密" scheme="http://FlashLightNing.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>混沌序列图像加密传输总结（1）</title>
    <link href="http://FlashLightNing.github.io/2016/04/07/%E6%B7%B7%E6%B2%8C%E5%BA%8F%E5%88%97%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93/"/>
    <id>http://FlashLightNing.github.io/2016/04/07/混沌序列图像加密传输/</id>
    <published>2016-04-07T14:02:40.000Z</published>
    <updated>2016-04-07T15:49:07.158Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;离散时间混沌序列图像加密解密大致有以下几个步骤:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=DJKZliiFPW-M_9jVWjt99glbS0RryObOFWuA6Nt2ZN-SfzdE3VNYO5jqgShK5ob0EJ9GGqlG0ncFhmWzaqGpu_&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;猫脸映射(也叫Arnold变换)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;混沌加密&lt;/li&gt;
&lt;li&gt;混沌解密&lt;/li&gt;
&lt;li&gt;猫脸逆映射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;踩了以下几个坑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如何读取图片将其转为像素数组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何将处理好的像素数组转为图片&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageIO.read(File file) =null的情况，但是图片文件却又是真实存在&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环迭代猫脸映射的时候，用数组1=数组2的方式，使得两个数组的引用是一样的，而导致修改数组1引起数组2的改变，然后发现映射出错。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;处理思路&quot;&gt;&lt;a href=&quot;#处理思路&quot; class=&quot;headerlink&quot; title=&quot;处理思路&quot;&gt;&lt;/a&gt;处理思路&lt;/h2&gt;&lt;p&gt; &amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;主要涉及了Java的图像处理方面的API，如读取图像，读取图像像素数组：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;       BufferedImage image = ImageIO.read(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(imgPath));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			N = image.getWidth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			array = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;[N][N];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			rgbArray = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[N * N + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从(0,0)开始，宽度为N,高度N（猫脸映射要求长宽一致）,offset=0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			rgbArray = image.getRGB(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, N, N, rgbArray, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; N; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Color color = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Color(rgbArray[j * N + i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					array[i][j] = color.getRed() / &lt;span class=&quot;number&quot;&gt;255.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;将像素数组转为一张图片：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; public static void changeArrayToImage(double[][] array, String path,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			String process) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//数组长度，即图片大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int N = array.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(process + &amp;quot;:&amp;quot; + N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//TYPE_BYTE_GRAY表示是灰度图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BufferedImage image = new BufferedImage(N, N,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				BufferedImage.TYPE_BYTE_GRAY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for (int i = 0; i &amp;lt; N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			for (int j = 0; j &amp;lt; N; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			/*本来是从0-1的double型数组，将他变成0-255范围的像  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  素值，选择让R=G=B=灰度值，根据这个生成了一个color对象，然后得到  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这个对象的RGB值（在Java里面是一个整数，不同的位数表示不同的值）  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;，然后绘制在(X,Y)点。这样就完成了从像素数组到图片的过程*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				int gray = (int) (array[i][j] * 255);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				int rgb = new Color(gray, gray, gray).getRGB();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				image.setRGB(i, j, rgb);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ImageIO.write(image, &amp;quot;jpg&amp;quot;, new File(path));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(process + &amp;quot;:数组转换图片成功,路径:&amp;quot; + path);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两个方法在算法中用到比较多，因为我把每个步骤处理之后得到的数组都画成图片，这样可以直观的看到效果：&lt;br&gt;原图:&lt;br&gt;&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/image/java/lena.jpg&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/p&gt;
&lt;p&gt;猫脸映射之后得到的图像&lt;img src=&quot;http://7xsmif.com2.z0.glb.clouddn.com/image/java/after_arnoldChange_image_path.jpg&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;br&gt;这只是迭代了5次之后得到的效果，&lt;strong&gt;猫脸映射存在一定的周期，所以也不是迭代次数越大越好&lt;/strong&gt;&lt;br&gt;前面读取图像还有一个坑，就是&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BufferedImage image = ImageIO.read(new File(imgPath));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它只能读取常用的一些图片格式，如&lt;/p&gt;
&lt;p&gt;-&lt;strong&gt;BMP, bmp, jpg, JPG, wbmp,&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jpeg, png, PNG, JPEG, &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WBMP, GIF, gif.&lt;/strong&gt;&lt;br&gt;而&lt;a href=&quot;http://baike.baidu.com/link?url=S4G2koOmL-zYfIaWKdn8OUy5fpQwPUcz7BanJdxcB6msMMT6Lk5q-kbDLPsO-qe-2gOR5fXhv6Imy3rR2MoBEWjKwObY1TLedhUcmCo-_vG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tiff&lt;/a&gt;格式的图片不能读取，因此会报&lt;strong&gt;ImageIO.read(new File(imgPath))=null&lt;/strong&gt;的错误。而且有些后缀名是jpg的图片也不能，是因为它只是改了文件后缀而已，实际上还是tiff格式的图片。&lt;h3 id=&quot;那么该怎么区分它们？怎么将tiff格式图片转为其他类型图片呢？&quot;&gt;&lt;a href=&quot;#那么该怎么区分它们？怎么将tiff格式图片转为其他类型图片呢？&quot; class=&quot;headerlink&quot; title=&quot;那么该怎么区分它们？怎么将tiff格式图片转为其他类型图片呢？&quot;&gt;&lt;/a&gt;那么该怎么区分它们？怎么将tiff格式图片转为其他类型图片呢？&lt;/h3&gt;在下一篇博客里面贴出区分方法及代码&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;离散时间混沌序列图像加密解密大致有以下几个步骤:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=DJKZliiFPW-M_9jVWjt99glbS0RryObOFWuA6Nt2ZN-SfzdE3VNYO5jqgShK5ob0EJ9GGqlG0ncFhmWzaqGpu_&quot;&gt;猫脸映射(也叫Arnold变换)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;混沌加密&lt;/li&gt;
&lt;li&gt;混沌解密&lt;/li&gt;
&lt;li&gt;猫脸逆映射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;踩了以下几个坑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如何读取图片将其转为像素数组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何将处理好的像素数组转为图片&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageIO.read(File file) =null的情况，但是图片文件却又是真实存在&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环迭代猫脸映射的时候，用数组1=数组2的方式，使得两个数组的引用是一样的，而导致修改数组1引起数组2的改变，然后发现映射出错。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://FlashLightNing.github.io/tags/java/"/>
    
      <category term="图像加密" scheme="http://FlashLightNing.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>About Blog</title>
    <link href="http://FlashLightNing.github.io/2016/04/07/About-Blog/"/>
    <id>http://FlashLightNing.github.io/2016/04/07/About-Blog/</id>
    <published>2016-04-06T16:45:38.000Z</published>
    <updated>2016-04-30T08:29:07.490Z</updated>
    
    <content type="html">&lt;h2 id=&quot;偷得浮生半日闲&quot;&gt;&lt;a href=&quot;#偷得浮生半日闲&quot; class=&quot;headerlink&quot; title=&quot;偷得浮生半日闲&quot;&gt;&lt;/a&gt;偷得浮生半日闲&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;走走停停，大学马上快毕业了，即将迈上人生的新阶段。可以说这最后几个月是学生的最后阶段。大学四年，也没学什么，玩着过，是一年，学着过，是一年，睡着过，是一年。懂得了每个人都有每个人的路，也许殊途同归，也许背道而驰。每个人对人生的追求，对人生的意义不一样。&lt;strong&gt;唯一一样的或许是把生活中的点滴美好记录在身边。这也是我想弄这个博客的原因&lt;/strong&gt;.&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;每个人生的阶段都有它的意义，都有它的美好，都有它的伙伴，而我想把它记录下来&lt;/strong&gt;。或许当我老后，翻看这个网站的每一篇博客，都还能体会到当时写博客的心境，感慨时光易逝。而我也不习惯发说说，发微博。也许是熟人太多，反而限制了我说话的自由。&lt;strong&gt;On the Internet, nobody knows you’re a dog&lt;/strong&gt; 我也可以在这个博客上写我所想，记我所玩。生活不仅仅是工作，生活处处是美好。珍惜最后的大学时光。  因此，我也会经常发游玩的照片到博客。想起来大学四年倒是拍了许多照片，不过都是随手一拍。偶尔翻看照片，还能回味，也许有刚上大一时寝室几人在哪家餐厅一起吃饭的，也许有上课时谁谁谁偷偷睡觉的。既然同学，就是缘分。每个阶段都有每个阶段的伙伴，想想他陪伴着你度过了人生了一个重要阶段。知己朋友无需太多，但是也需要培养。有那么几个能以后一起吃吃饭，畅谈就够了。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;也许自己还是太感性了，夜深人静的时候，种种思绪涌上心头。但是人生需要拼搏，需要努力。&lt;strong&gt;20岁的贪玩 造就了30岁的无奈！ 30岁的无奈成就了40岁的无为！ 40岁的无为奠定了50岁的失败！ 50岁的失败酿造了一辈子的碌碌无为！&lt;/strong&gt;虽然夸张了一些  只是希望自己在一直努力前行的时候，别忘了身边的朋友和美好生活，把它记录下来吧  它是我一辈子的财富！！&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;On the Internet, nobody knows you’re a dog&lt;/strong&gt;&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;此时窗外下着大雨，一个舍友在翻墙，一个舍友在玩LOL，而我在用MarkdownPad2第一次写文章！  本来想把最近忙的毕设做个总结写个博客的，想想尼玛开个博客就知道写技术，真是没情趣，于是有了这篇《听雨》&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;–记录于2016年4月7日1点13分。雨&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;偷得浮生半日闲&quot;&gt;&lt;a href=&quot;#偷得浮生半日闲&quot; class=&quot;headerlink&quot; title=&quot;偷得浮生半日闲&quot;&gt;&lt;/a&gt;偷得浮生半日闲&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;走走停停，大学马上快毕业了，即将迈上人生的新阶段。可以说这最后几个月是学生的最后阶段。大学四年，也没学什么，玩着过，是一年，学着过，是一年，睡着过，是一年。懂得了每个人都有每个人的路，也许殊途同归，也许背道而驰。每个人对人生的追求，对人生的意义不一样。&lt;strong&gt;唯一一样的或许是把生活中的点滴美好记录在身边。这也是我想弄这个博客的原因&lt;/strong&gt;.
    
    </summary>
    
    
      <category term="生活" scheme="http://FlashLightNing.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
